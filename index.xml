<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>fe-news</title><id></id><updated>2021-08-04T01:40:26+00:00</updated><entry><title>2020-11</title><id>https://github.com/naver/fe-news/blob/master/issues/2020-11.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2020-11.md" rel="alternate"/><content type="xhtml"><h1>2020-11 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://github.com/evanw/esbuild/issues/478">Safari deopt with a large ESBuild bundle</a></h2>
<!-- raw HTML omitted -->
<p>한 사용자가 Go로 작성된 번들러인 <a href="https://github.com/evanw/esbuild">esbuild</a> 프로젝트 이슈를 통해, Safari에서 커다란 크기의 번들 파일을 실행하면 타 브라우저 대비 6~8x 배 성능이 느려지는 현상에 대해 재현 케이스들과 함께 문의하는 내용의 글이다.</p>
<p>esbuild 프로젝트 메인터너 중 한 명인, Evan Wallace는 변수 선언 시 <code>let/const</code> 대신 <code>var</code>를 사용하는 경우 문제가 해결되는 것을 발견했고, 관련 내용은 <a href="https://bugs.webkit.org/show_bug.cgi?id=199866">JavaScriptCore의 버그</a>로 리포팅 되었다.</p>
<h2><a href="https://mdn-web-dna.s3-us-west-2.amazonaws.com/MDN-Browser-Compatibility-Report-2020.pdf">MDN Browser Compatibility Report 2020</a></h2>
<!-- raw HTML omitted -->
<p>Mozilla에서 해마다 발행하는 브라우저 호환성 리포트로 공개 설문조사를 통해 수집된 의견을 통해 현재 웹 개발의 상태를 보여주고, 일부 항목들에 대한 개별적 인터뷰도 포함하고 있어 실 사용 환경에서의 생생한 경험을 엿볼 수도 있다.</p>
<p>결과를 통해 비단 IE는 국내뿐만 아니라 해외 개발자들에게도 가장 골칫거리 임을 확인할 수 있다.</p>
<h2><a href="https://web.dev/commonjs-larger-bundles/">How CommonJS is making your bundles larger</a></h2>
<p>왜 CommonJS 모듈 시스템이 여러분들의 번들 크기를 필요 이상으로 크게 만들 수 있는지에 대해 설명하는 글로 인기 있는 번들러인 Webpack에서 ModuleConcatenationPlugin을 통해 모듈이 번들링 되는 과정을 예제를 통해 소개한다.</p>
<p>결론적으론 번들러가 성공적인 최적화를 적용하기 위해선 CommonJS 대신 ESM을 사용하는 것이 가장 확실한 방법임을 얘기한다.</p>
<blockquote>
<p>[참고] <a href="https://github.com/mgechev/is-esm">is-esm</a> 프로젝트는 해당 패키지가 ESM 모듈인지 간단하게 확인할 수 있게 도와준다.
<!-- raw HTML omitted --></p>
</blockquote>
<h2><a href="https://developer.mozilla.org/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks">Understanding client-side JavaScript frameworks</a></h2>
<p>Mozilla 재단이 운영하는 MDN 문서 사이트는 사실상 웹 기술들의 &quot;공식&quot; 문서와 다름없는 defacto 사이트라 할 수 있다.</p>
<p>MDN은 표준 기술들을 주로 다루지만, 주요 프레임워크들에 대한 내용도 다루고 있다.</p>
<ul>
<li><a href="https://developer.mozilla.org/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started">React</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started">Svelte
</a></li>
<li><a href="https://developer.mozilla.org/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started">Vue</a></li>
<li><a href="https://developer.mozilla.org/ko/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started">Ember</a></li>
</ul>
<h2><a href="https://addyosmani.com/blog/the-prpl-pattern/">Faster Web App Delivery with PRPL</a></h2>
<!-- raw HTML omitted -->
<p>PRPL(Push, Render, Pre-cache, Lazy-load) 패턴은 Polymer 팀이 2016년 소개했던 개념으로 웹 애플리케이션의 구조화와 제공에 대한 방법론이다.</p>
<p>이 글에선 PRPL 웹 애플리케이션을 위한 구성 요소와 구조에 대해 가볍게 소개하며, 2017년부터 PRPL을 적용해 서비스하고 있는 트위터의 사례를 통해 성능 지향적인 서비스 개발 패턴을 소개한다.</p>
<h2><a href="https://www.youtube.com/playlist?list=PLNBNS7NRGKMGCBNebw8xkpkq_lhgPoIzR">React Summit Remote Edition 2020</a></h2>
<!-- raw HTML omitted -->
<p>지난 5월 진행됐던 <code>React Summit Remote Edition 2020</code> 온라인 콘퍼런스 세션들에 대한 재생목록으로, <a href="https://nextjs.org/">Next.js</a> 개발자인 Guillermo Rauch, <a href="https://github.com/testing-library/react-testing-library">React Testing Library</a> 개발자인 Kent C. Dodds 등이 연사로 참여한 세션들을 들어볼 수 있다.</p>
<h2><a href="https://sveltesummit.com/">Svelte Summit 2020</a></h2>
<!-- raw HTML omitted -->
<p>지난 10월 18일 진행된 Svelte 온라인 콘퍼런스로, 총 18개의 다양한 주제로 구성된 세션들을 확인해 볼수 있다.</p>
<h2><a href="https://medium.com/hacking-talent/two-years-of-micro-frontends-a-retrospective-522526f76df4">Two years of micro-frontends: A retrospective</a></h2>
<p>Create React App과 Stroybook 메인터너로 참여하고 있는 Brody McKee의 글로, 지난 2년간 마이크로 프런트엔드 도입에 대한 소회를 밝히는 글로 실 서비스 도입을 통한 장단점을 공유한다.</p>
<h2><a href="https://medium.com/frontend-digest/whats-new-in-webpack-5-ef619bb74fae">Whats's New in Webpack 5</a></h2>
<!-- raw HTML omitted -->
<p>지난 10월 Webpack 4가 릴리스된 지 2년 만에 v5가 출시되었다.
v5에서는 이전 버전에 비해 빌드 속도가 향상되었으며, 번들 사이즈도 감소했다.</p>
<p>v5에서 주목해 볼 만한 변경사항은 <a href="https://webpack.js.org/concepts/module-federation/"><strong>Module Federation</strong></a> 기능으로, 다수의 Webpack 빌드가 함께 동작할 수 있으며 필요에 따라 큰 제약 없이 다른 모듈로부터 코드를 동적으로 불러올 수도 있다.</p>
<p>개발 환경에서 번들러의 메이저 버전 마이그레이션은 어쩌면 귀찮고 어려우며 손이 많이 가는 작업일 것이다. 하지만 더 쾌적하고 생산적인 빌드 및 개발 환경을 위해 꼭 필요한 작업이기도 하다. 앞으로의 2년을 위해 <a href="https://webpack.js.org/migrate/5/">가이드</a>를 참고하여 차근차근 마이그레이션하는 시간을 가져보는 것은 어떨까?</p>
<p>보다 더 자세한 사항은 <a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/">공식 문서</a>에서 참고할 수 있다.</p>
<h2><a href="https://nextjs.org/blog/next-10">Next.js 10</a></h2>
<p>React 애플리케이션 프레임워크인 Next.js의 새로운 메이저 릴리스인 <code>Next.js 10</code>이 공개되었다.</p>
<p><a href="https://nextjs.org/blog/next-10#built-in-image-component-and-automatic-image-optimization">빌트인 이미지 최적화</a> 기능, 성능 측정을 위한 <a href="https://nextjs.org/blog/next-10#nextjs-analytics">Analytics</a>, 이커머스
사이트를 위한 <a href="https://nextjs.org/blog/next-10#nextjs-commerce">Commerce 스타터킷</a>, 최신 <a href="https://nextjs.org/blog/next-10#react-17-support">React 17 지원</a> 등이 포함되었다.</p>
<blockquote>
<p><a href="https://nextjs.org/conf/schedule"><strong>Next.js CONF</strong></a><!-- raw HTML omitted -->
지난 10월 27일, Next.js의 첫 온라인 콘퍼런스가 진행되었다. 총 4개 트랙으로 구성된 프로그램에서는 Next.js를 사용하는 여러 분야의 기업들 연사들이 참여해 다양한 사례들을 공유한다.</p>
</blockquote>
<h2><a href="https://nickb.dev/blog/results-of-authoring-a-js-library-with-rust-and-wasm">Results of Authoring a JS Library with Rust and Wasm</a></h2>
<!-- raw HTML omitted -->
<p>스웨덴 게임 개발사인 <a href="https://en.wikipedia.org/wiki/Paradox_Development_Studio">Paradox Development Studios</a>에서 개발된 게임 파일들의 plaintext를 파싱 하거나 저장하는 라이브러리인 <a href="https://github.com/nickbabcock/jomini">Jomini.js</a> 프로젝트에서 사용하던 순수 JavaScript 파서를 Rust로 작성된 wasm 모듈로의 전환 과정을 다룬다.</p>
<p>전환을 통해 더 나은 성능 향상과 그에 따른 경험적 측면을 살펴볼 수 있다.</p>
<h2><a href="https://dev.to/alekseiberezkin/what-happened-to-immutable-js-and-how-can-we-react-5c34">What happened to Immutable.JS? And how can we react?</a></h2>
<p>Immutable(불변성) 데이터를 처리하기 위한 대표적인 JS 라이브러리로는 <a href="https://github.com/immutable-js/immutable-js">Immutable.js</a>, <a href="https://github.com/immerjs/immer">immer</a> 등을 꼽을 수 있다. 하지만 Immutable.js는 약 2년 전에 마지막으로 publish 된 것을 알고 있는가?</p>
<p>이 글에서는 Immutable.js가 현재 유지 보수가 되지 않고 있으며 어떤 대안을 찾을 수 있는지 설명한다.</p>
<h2><a href="https://www.swyx.io/svelte-sites-react-apps/">Svelte for Sites, React for Apps</a></h2>
<p>웹사이트는 주로 콘텐츠를 보여주기 위한 용도로 제한적인 인터렉션을 포함하며, 제한적인 상황(낮은 성능의 CPU, 제한적 데이터 사용 등)에서도 소비될 수 있어야 한다.</p>
<p>반면, 웹앱은 주로 인터렉션을 통한 사용성을 제공하며, 일반적으로 무거운 자원들을 포함하나 2MB 정도의 JS 웹앱의
크기는 200MB 용량의 모바일 앱과 비교 시 상대적으로 나쁘지 않다고 생각될 수 있다.</p>
<p>이 글에서는 웹사이트와 웹앱의 특성에 따라 각각의 프레임워크들의 기술적 특성들을 통해 왜 웹사이트는 Svelte가 더 적합하고,
그리고 React는 웹앱에 더 적합한지를 설명한다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://medium.com/nmc-techblog/introducing-the-async-cookie-store-api-89cbecf401f">Introducing: The Async Cookie Store API</a></h2>
<p>Chrome 87+부터 새롭게 추가된 기존의 <code>document.cookie</code>의 새로운 개선 API인  <a href="https://wicg.github.io/cookie-store/"><code>Cookie Store API</code></a>를 소개하는 글로, Service Worker와 비동기 처리를 통해 쿠키를 설정하거나 가져올 수 있는 방법들을 간단한 예제를 통해 설명한다.</p>
<pre><code class="language-js">// 기존 방식
document.cookie.split(&quot;;&quot;).forEach(v =&gt; ...);

// Cookie Sotre API
await cookieStore.get(&quot;쿠키이름&quot;);
</code></pre>
<h2><a href="https://github.com/Asabeneh/30-Days-Of-React">30 Days Of React</a></h2>
<!-- raw HTML omitted -->
<p>30일의 기간 동안 매일 따라 해 볼 수 있는 Step by step React 가이드를 통해 React를 마스터할 수 있도록 도와주는 프로젝트다.</p>
<p>꼭 일정에 맞춰 학습하지 않더라도, 목차를 통해 제공되는 각각의 개념들에 대한 설명을 읽어보는 것만으로도 React의 주요 개념들을 학습할 수 있다.</p>
<h2><a href="https://www.youtube.com/watch?v=K5eoHVbwAhI">Build an Income Tracker in ReactJS ~ useState, useEffect, useRef</a></h2>
<p>토이 프로젝트인 &quot;Income Tracker&quot; 애플리케이션 개발을 처음부터 완성까지 따라 해 볼 수 있는 튜토리얼 동영상으로, React의 기본적 구성요소와 함께 다양한 Hooks(useState, useRef, useEffect) 등의 활용 방법 등도 함께 배워볼 수 있다.</p>
<blockquote>
<p>프로젝트 저장소: https://github.com/TylerPottsDev/income-tracker-rjs</p>
</blockquote>
<h2><a href="https://github.com/microsoft/beginners-intro-javascript-node">Beginner's Series - Intro to JavaScript (Node.js)</a></h2>
<p>MS에서 만든 Node.js에서 동작하는 애플리케이션 개발을 위한 초심자 대상 JavaScript 튜토리얼로, 이론적인 것보단 문법에 보다 집중한다.</p>
<h1>도구</h1>
<h2><a href="https://github.com/volta-cli/volta">Volta</a></h2>
<!-- raw HTML omitted -->
<p>Node.js 버전 관리를 위한 대표적인 도구로는 <a href="https://github.com/nvm-sh/nvm">nvm</a>과 <a href="https://github.com/tj/n">n</a>이 있지만, 몇가지 이슈들(Windows 미지원, 성능, 직관적이지 않은 설정방법 등)이 존재한다.</p>
<p>Rust로 개발된 Volta는 Node.js외, npm, yarn 등 FE 개발에 필요한 다양한 툴체인 도구들을 빠르고 쉽게 설치하고, 프로젝트별 다른 버전 사용 등의 기능들을 제공한다.</p>
<p>대다수의 Unix(MacOS) 시스템에선 간단하게 다음과 같이 설치할 수 있고, Windows는 다음의 <a href="https://github.com/volta-cli/volta/releases/download/v0.8.7/volta-0.8.7-windows-x86_64.msi">설치파일</a>을 받아 설치하면 된다.</p>
<pre><code class="language-sh"># Unix 환경에서 설치
curl https://get.volta.sh | bash
</code></pre>
<pre><code class="language-sh">volta install node
volta install node@12
</code></pre>
<p>프로젝트에 따라 서로 다른 Node.js(또는 다른 툴체인) 버전으로 자동 전환되게 하고 싶다면, package.json 파일의 <a href="https://docs.npmjs.com/files/package.json#engines"><code>engines</code></a> 필드 또는 <code>volta pin 패키지명@버전</code> 명령어를 통해 관리할 수 있다.</p>
<pre><code class="language-js">// &quot;volta pin node@10.15.3&quot; 명령어는 package.json 파일에 아래와 같은 설정을 추가해 관리한다.
&quot;volta&quot;: {
  &quot;node&quot;: &quot;10.15.3&quot;,
  &quot;yarn&quot;: &quot;1.14.0&quot;
}
</code></pre>
<p>또한 다양한 CLI 도구들에 대한 버전 전환 기능도 제공한다. 해당 프로젝트 내에서 서로 다른 typescript 패키지를 사용(devDependency나 dependency로 설정된 경우)하고 있다면 commend line에서 해당 버전을 사용하도록 설정할 수도 있다.</p>
<pre><code class="language-sh">cd /dev/project-using-typescript-2.9.2
tsc --version # 2.9.2

cd /dev/project-using-typescript-3.4.5
tsc --version # 3.4.5
</code></pre>
<h2><a href="https://github.com/verdaccio/verdaccio">Verdaccio</a></h2>
<!-- raw HTML omitted -->
<p>Verdaccio는 무설정 로컬 프라이빗 npm 레지스트리를 구축할 수 있게 도와주는 도구로, 자체 데이터베이스를 포함하고 있어 사용을 위해 별도 데이베이스를 구축 필요가 없다. 또한 외부의 다른 레지스트리들(ex. npmjs.org)에 대한 프록시 기능도 제공된다.</p>
<h2><a href="https://github.com/open-source-labs/reactime">Reactime</a></h2>
<p>Chrome 확장 기능으로, React 애플리케이션 컴포넌트들의 상태를 스냅샷으로 저장해 Time Travel Debugging을 통해 특정 상태 이동을 통한 디버깅을 도와준다.</p>
<blockquote>
<p><a href="https://chrome.google.com/webstore/detail/reactime/cgibknllccemdnfhfpmjhffpjfeidjga">chrome 웹 스토어에서 설치하기</a></p>
</blockquote>
<p>페이스북의 새로운 상태 관리자 라이브러리인 Recoil을 포함, Context API, 등을 지원한다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://www.consolechat.io/">ConsoleChat.io </a></h2>
<p>이제 막 시작한 지 얼마 되지 않은 프로젝트로, 브라우저 콘솔을 통한 실시간 채팅룸을 만들 수 있도록 도와주는 라이브러리다.
사용 방법은 라이브러리가 로딩된 페이지에 접속 후, 콘솔에서 라이브러리 초기화와 사용할 사용자명을 설정하고 바로 대화를 시작할 수 있다.</p>
<p>아직 명령어를 통한 사용방법 등에서 개선될 여지가 많아 보이지만, 참신한 접근 방법이 재미있어 보이는 프로젝트다.</p>
<h2><a href="https://github.com/turbolinks/turbolinks">Turbolinks</a></h2>
<!-- raw HTML omitted -->
<p>Turbolinks는 별도의 복잡한 클라이언트 JavaScript 프레임워크를 사용하지 않고 SPA에서 내비게이션 페이지들로의 빠른 이동(렌더링)을 가능케 한다.</p>
<p>동일 도메인 내의 모든 <code>&lt;a href&gt;</code> 클릭을 인터셉트하고 History API로 기존 link를 업데이트한 후, XHR을 통해 링크 대상 페이지를 로딩한다.
이후 <code>&lt;body&gt;</code> 영역의 모든 콘텐츠를 새로운 페이지의 것으로 대체하고, <code>&lt;head&gt;</code>는 머지 하는 형태로 동작한다.</p>
<p>HTML5 History API와 requestAnimationFrame이 지원되는 브라우저라면 사용이 가능하다.</p>
</content></entry><entry><title>2020-07</title><id>https://github.com/naver/fe-news/blob/master/issues/2020-07.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2020-07.md" rel="alternate"/><content type="xhtml"><h1>2020-07 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://css-tricks.com/off-the-main-thread/">Off The Main Thread</a></h2>
<!-- raw HTML omitted -->
<p>JavaScript는 &quot;단일 스레드&quot;로 실행되며, 이는 곧 한 개의 콜 스택(call stack)과 한 개의 메모리 힙(memory heap)이 존재함을 의미한다.</p>
<p>모든 작업이 메인 스레드에서 실행된다는 것은 마치 도시로 향하는 단 하나의 길을 통해 모든 차량들이 그곳으로 가기 위해 길 위에서 기다리고 있는 모습으로 비유될 수 있다. 이러한 병목현상 문제를 해결하는 방법은 무엇일까?</p>
<p>바로 모든 작업을 메인 스레드에서 실행하지 않는 것이다. UI 관련 작업이 아니라면, 네이티브 표준 API인 &quot;Web Workers&quot;를 사용해 메인 스레드 밖에서 JavaScript를 실행하고, 가능한 한 모든 상황에서 이를 적용하는 것에 대한 필요성을 언급하는 내용의 글이다.</p>
<h2>JavaScript Visualized</h2>
<!-- raw HTML omitted -->
<p>다음의 7개 주제로 구분된 이 시리즈는 시각적 이미지와 애니메이션을 사용해 JavaScript의 언어적 특성과 함께 핵심적인 개념들을 쉽게 이해할 수 있도록 도와준다.</p>
<ul>
<li><a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif">Event Loop</a></li>
<li><a href="https://dev.to/lydiahallie/javascript-visualized-hoisting-478h">Hoisting</a></li>
<li><a href="https://dev.to/lydiahallie/javascript-visualized-scope-chain-13pd">Scope (Chain)</a></li>
<li><a href="https://dev.to/lydiahallie/javascript-visualized-the-javascript-engine-4cdf">JavaScript 엔진</a></li>
<li><a href="https://dev.to/lydiahallie/javascript-visualized-prototypal-inheritance-47co">Prototypal Inheritance</a></li>
<li><a href="https://dev.to/lydiahallie/javascript-visualized-generators-and-iterators-e36">Generators and Iterators</a></li>
<li><a href="https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke">Promises &amp; Async/Await</a></li>
</ul>
<h2><a href="https://d2.naver.com/helloworld/7804182">어서와, SSR은 처음이지? - 도입 편</a> (1/3 진행 중)</h2>
<p>네이버 블로그 서비스에 Node.js 기반의 SSR을 도입한 경험기를 소개하는 첫번째 글이다.</p>
<p>이 글은 총 3편 중 첫번째 &quot;도입 편&quot;으로 Node.js 기반의 SSR을 블로그 서비스에 도입한 이유와 배경에 관한 글이다.</p>
<p>angular.js를 선택하고, Full Stack Developer를 지향했던 개발팀이 왜? React를 선택하고, FE 전문 인력을 육성하게 되었는지를 설명하고 있다.</p>
<p>이후 다룰 &quot;개발편&quot;, &quot;운영편&quot;에서는 대한민국 국민들이 모두 사용하는 블로그의 트래픽을 준비한 경험과 운영했던 내용을 다룰 예정이라 다음 편이 더 기대되는 글이다.</p>
<h2><a href="https://addyosmani.com/blog/profiling-react-js/">Profiling React.js Performance</a></h2>
<p>리액트의 Profiler API와 Interaction Tracing API, 그리고 브라우저의 User Timing API을 이용하여 영화 앱의 랜더링 속도와 인터랙션 속도를 어떻게 측정할 수 있는지 설명하고 있다.</p>
<p>이 글에서 다루는 API를 이용하면 훌륭한 클라이언트 랜더링 모니터링 툴도 충분히 구축 할 수 있다.</p>
<p><a href="https://kentcdodds.com/blog/react-production-performance-monitoring">React Production Performance Monitoring</a> 에서는 이를 이용한 Performance Monitoring 툴 구축 아이디어를 언급하고 있다.</p>
<h2><a href="https://wit.nts-corp.com/2020/06/05/6134">CSS 애니메이션의 성능 아는 만큼 좋아져요!</a></h2>
<p>Chrome DevTools을 통해 애니메이션시 적용하는 CSS 속성에 따라 애니메이션이 어떻게 성능 차이가 나는지를 예제를 통해 보여주는 글이다.</p>
<p>이 글을 통해 간접적으로나마 Chrome DevTools에서 성능을 측정하교 비교하는 방법을 배울 수 있다.</p>
<h1>튜토리얼</h1>
<h2>리액트 훅 MVVM 시리즈 글 (진행 중)</h2>
<ul>
<li><a href="https://www.bsidesoft.com/8267">리액트 훅 MVVM #1</a></li>
<li><a href="https://www.bsidesoft.com/8280">리액트 훅 MVVM #2</a></li>
<li><a href="https://www.bsidesoft.com/8289">리액트 훅 MVVM #3</a></li>
<li><a href="https://www.bsidesoft.com/8304">리액트 훅 MVVM #4</a></li>
</ul>
<p>일반적인 리액트 훅을 이용한 개발 튜토리얼이기보다는 리액트의 모델-렌더 시스템을 이해하고 이를 이용하여 MVVM 모델로 구축해보는 튜토리얼 성격의 글이다.</p>
<ul>
<li>1부에서는 리액트의 모델-렌더 시스템과 증분 랜더링 소개를 시작으로 리액트 훅의 개념을 설명하고 있다.</li>
<li>2부에서는 MVVM 모델의 바인더를 리액트 state를 통해 구현하고 커맨드의 구조를 만들어 가는 것을 설명하고 있다.</li>
<li>3 ~ 4 부에서는 todo 앱을 만들어 보면서 리액트 훅의 미묘한 차이점을 살펴본다.</li>
</ul>
<!-- raw HTML omitted -->
<p>재미있는 점은 이 글에서는 리액트 함수형 컴포넌트와 훅 사용으로 인해 발생하는 미묘한 차이를 저자의 독특한 시각과 방법으로 해결하고 있다.
리액트를 이용하여 MVVM을 구현하는 것보다 이 튜토리얼을 통해 리액트를 더 잘 이해할 수 있는 계기가 되면 좋겠다.</p>
<p>이 글 외에 리액트 훅에 대한 자세한 내용을 알고 싶다면 다음 글을 참조해 보길 바란다.</p>
<ul>
<li>A Complete Guide to useEffect <a href="https://overreacted.io/ko/a-complete-guide-to-useeffect/">[한국어]</a> [<a href="https://overreacted.io/a-complete-guide-to-useeffect/">영어</a>]</li>
<li><a href="https://leontrolski.github.io/33-line-react.html">33 line React</a></li>
</ul>
<h2>API 공통화 관련 글</h2>
<ul>
<li>리액트 앱에서의 중앙 집중식 API 에러 핸들링 [<a href="https://ui.toast.com/weekly-pick/ko_20200623/">한국어</a>] [<a href="https://itnext.io/centralizing-api-error-handling-in-react-apps-810b2be1d39d?gi=9de019662e0c">영어</a>]</li>
<li><a href="https://medium.com/swlh/usefetch-a-custom-react-hook-36d5f5819d8">useFetch — A Custom React Hook</a></li>
</ul>
<p>첫번째 글은 &quot;API 오류를 어떻게 중앙에서 관리하는가?&quot;에 대한 문제를 중심으로 풀어가는 글이라면 두번째 글은 &quot;React Custom Hook을 어떻게 만드는가?&quot;에 대한 글이다.<br />
두 글의 목적이 다르지만 API를 공통화해가는 과정은 두 글 모두 인상 깊다.</p>
<h1>코드와 도구</h1>
<h2><a href="https://morioh.com/p/a76bc7d72226">127 Useful JavaScript Snippets You can understand in 30 seconds</a></h2>
<p>127 개의 유용한 JavaScript 코드 조각 모음.<br />
127 개라 긴 글일거라 생각하겠지만. 쉽게 이해 할 수 있는 요긴하고 간단한 코드 조각들이다.</p>
<h2><a href="https://codepen.io/anniebombanie/pen/pojmNzN?__cf_chl_jschl_tk__=71de61593b16a5028cd8b9ae58a10111bf587d1c-1591055028-0-ATDH36t3q8LbU3cZgW28qQcbIcWRru4XfaWNQchgM8IcwSMs8kGFf9aC-pj8_NLur2_KvBf4a9la1eojybUQRq09ItOPayABj0M6cAXpABEXrjyY3vvhROMPWLlf_dw1Bg8fNMqEVAkf-OA3auDTTPuv8JZ_nQhkNlGjKDP5hkxplNPMxn5enH7TmVLNatpPCSBbwdAqZQNiDO0R2LqA_s-OlN9bdlIMKJ4wTvpBzChZF5dSh">One Div iPad Pro</a></h2>
<p>CSS만으로 그린 iPad Pro 예제 코드</p>
<h2><a href="https://audiomass.co/">audiomass.co</a></h2>
<p>서버 기술 없이 브라우저 웹 기술만으로 음성을 편집할 수 있는 웹 음성 편집기.<br />
Web Audio API와 WebAssembly를 이용하여 오디오 효과 적용과 편집을 구현하고 있다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://woowacourse.github.io/javable/">우아한테크코스 코드 리뷰 모음 블로그</a></h2>
<p>우아한 형제들의 &quot;우아한테크코스&quot; 코드리뷰 내용을 정리하여 공개한 사이트.<br />
FrontEnd와 직접 적인 관련은 없지만 코드를 바라보는 개발자로서 참고하면 좋은 이야기들로 가득하다.</p>
<h2><a href="https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio">Draw.io VS Code Integration</a></h2>
<p>다이어그램을 그리고 쉽게 공유할 수 있는 도구인 draw.io의 VS Code Extension.<br />
개발과 함께 설계도 이제 VS Code 내에서 자유롭게 사용할 수 있다.</p>
<!-- raw HTML omitted -->
</content></entry><entry><title>2021-07</title><id>https://github.com/naver/fe-news/blob/master/issues/2021-07.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2021-07.md" rel="alternate"/><content type="xhtml"><h1>2021-07 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://velog.io/@jay/React-18-%EB%B3%80%EA%B2%BD%EC%A0%90">React 18 변경점</a></h2>
<p>2021.6.8 React 공식 페이지에서 <a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html">React 18에 대한 계획</a>을 공유하였다. 이 글은 React 18에서 변경될 Suspense ssr architecture, State batch update, Transition 에 대해 설명한 글이다.</p>
<p>기존에는 개발자가 직접 제어해야하거나 제약이 있던 SSR 랜더링 부분이 pipeToNodeWritable, Suspense와 Lazy를 통해 React 단위에서 효과적으로 적용할 수 있게 된다.</p>
<!-- raw HTML omitted -->
<p>기존에 부분 적용되었던 State batch update도 api 요청, timeout과 같은 비동기 작업 내에서도 자동 적용된다. 뿐만아니라 상태 업데이트의 우선순위를 정할 수 있는 startTransition 인터페이스도 제공한다.</p>
<p>React 18은 기존 Major 버전 업그레이드와 동일하게 어플리케이션 코드 변경 없이 손쉽게 적용할 수 있기에 정식 릴리즈가 되면 부담없이 적용해 보면 좋을 것 같다.</p>
<blockquote>
<p>[참고]</p>
<ul>
<li>
<p>문서 전체를 살펴보기 부담스럽다면, 다음의 12개 트윗으로 정리된 요약본을 확인하라.<br />
https://twitter.com/ProvablyFlarnie/status/1406729279317045248</p>
</li>
<li>
<p>Project React 18 릴리즈 일정은 다음을 참고하기 바란다.<br />
https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html#projected-react-18-release-timeline</p>
</li>
</ul>
</blockquote>
<h2><a href="https://medium.com/geekculture/react-5-things-that-might-surprise-you-ddefd9fbac0f">React — 5 Things That Might Surprise You</a></h2>
<p>React에 대해 잘못 사용하고 있을 만한 5가지 내용을 다루고 있다. 이 글에 나온 예시를 통해 조금 더 React를 잘 이해하길 바란다.</p>
<h2><a href="https://javascript.plainenglish.io/5-advanced-react-patterns-a6b7624267a6">5 Advanced React Patterns</a></h2>
<p>단순한 Counter 예제를 바탕으로 5가지 React 패턴을 제어의 역전, 구현 복잡도 기준으로 설명한다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://blog.atomrc.dev/p/why-you-cannot-condition-react-hooks/">Why React Hooks cannot be conditioned</a></h2>
<p>React hooks와 함께 <a href="https://github.com/facebook/react/tree/master/packages/eslint-plugin-react-hooks">eslint-plugin-react-hooks</a>을 사용해봤다면, <code>React Hook &quot;useState&quot; is called conditionally.</code>와 같은 예기치 않은 경고 메세지와 맞닥뜨린 경험이 있을 것이다.</p>
<pre><code class="language-js">function Component({ doEffect }) {
  // {value: 0, next: {value: 0, next: null}}
  const [first, setFirst] = useState(0);
  if (doEffect) {
    // {value: 0, next: null}
    useEffect(/*...*/); // ⚠️ Wrong hook here
  }
  // null
  const [second, setSecond] = useState(0); // ⚠️ No hook left!!
}
</code></pre>
<p>이 글은 Hooks가 왜 조건식을 통해 사용될 수 없는지를 설명한다.</p>
<h2><a href="https://nextjs.org/blog/next-11">Next.js 11 정식 릴리즈</a></h2>
<p>Next.js 11이 2021.6.16 정식 릴리즈 되었다. 11 버전에서는 React Fast Refresh 를 개선하여 시작 시간을 최대 24% 개선하였고, 변경 처리시간을 40% 단축 시켰다. 뿐만아니라 기본 번들러 도구로 Webpack5를 제공함으로써 Webpack5의 장점을 Next.js 11에서도 체감할 수 있다.<br />
또한 <code>next/script</code>, <code>next/image</code>와 같은 모듈도 제공하여 손쉽게 스크립트 제어와 이미지 플레이스 홀더 제어를 할 수 있게 되었다.
그 외에 Create React App Migration, Next.js Live 기능을 실험적으로 이용할 수 있게 되었다.</p>
<h2>ES2021</h2>
<p>2021.6.22 ES2021 스펙이 정식 승인 되었다.</p>
<ul>
<li>Logical Assignment Operators (&amp;&amp;= ||= ??=)</li>
<li>Numeric Separators (1_000)</li>
<li>Promise.any &amp; AggregateError</li>
<li>String.prototype.replaceAll</li>
<li>WeakRefs &amp; FinalizationRegistry</li>
</ul>
<p>ES2021 스펙의 간단한 예제는 다음 링크를 통해 살펴볼 수 있다.<br />
https://h3manth.com/ES2021/</p>
<h2><a href="https://www.smashingmagazine.com/2021/06/how-to-fix-cumulative-layout-shift-issues/">How To Fix Cumulative Layout Shift (CLS) Issues</a></h2>
<p>이미지 크기 부터 폰트, JavaScript 적용등 다양한 영역에서 발생 할 수 있는 CLS 이슈 해결 방법을 조목 조목 설명하고 있다. 개발하고 있는 서비스에 차근차근 적용해보기 좋은 글이다.</p>
<blockquote>
<p><a href="https://web.dev/css-web-vitals/">CSS For Web Vitals</a> 글도 함께 참고하기 바란다.</p>
</blockquote>
<h2><a href="https://web.dev/better-responsiveness-metric/">Towards a better responsiveness metric</a></h2>
<p>사용자 반응성에 영향을 미칠수 있는 metric로 FID(First Input Delay)를 살펴보고 사용자 반응성을 높일 수 있는 몇가지 아이디어를 기술하고 있다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://web.dev/introducing-aurora/">Introducing Aurora</a></h2>
<p>크롬 엔지니어(내부 코드명 WebSDK)팀 은 지난 2년간 주요 오픈소스 프레임워크/도구들과의 협업을 통해 더 나은 사용자 경험을 제공하기 위한 노력을 해왔으며, 지난 6월 15일 이를 &quot;Aurora&quot;라 명명했다.</p>
<p>목표는 단순하다. 앱이 어떤 브라우저에서 렌더링 되는 것인지 상관없이, 가장 뛰어난 사용자 경험을 제공하는 것이며, 앞으로 몇 개월간 보다 자세한 내용들을 공개할 예정임을 밝혔다.</p>
<!-- raw HTML omitted -->
<p>Aurora의 첫 번째 작업은 &quot;Comformance&quot;라 불리며, JavaScript 프레임워크 생태계에 집중해 예측 가능한 로딩 성능과 <a href="https://web.dev/vitals/#core-web-vitals">Core Web Vitals</a> 점수를 높일 수 있도록 코딩 모범사례를 구현할 수 있도록 도움을 주는 것에 목표를 두고 있다.</p>
<ul>
<li><a href="https://web.dev/conformance/">Conformance for Frameworks</a></li>
</ul>
<h2><a href="https://www.w3.org/community/webextensions/2021/06/04/forming-the-wecg/">Forming the WebExtensions Community Group</a></h2>
<p>지난 수년간 브라우저 확장 익스텐션(플러그인)들의 사용의 증가와 함께 다수 브라우저들에서의 상호 호환 모델 채택 등의 움직임에 따라 확장 익스텐션의 표준화된 접근의 필요성이 대두되었고, 이를 위해 W3C 산하 WebExtenstions Community Group(WECG)가 지난 6월 4일 주요 브라우저 벤더들인 Apple, Google, MS 그리고 Mozilla가 참여를 통해 만들어졌다.</p>
<h2><a href="https://www.matthewgerstman.com/tech/history-of-the-web/">History of the Web: Part 1</a></h2>
<p>저자의 지난 20년간 웹 영역에서의 기술적 경험을 바탕을 통해 웹의 역사를 간략하게 정리한 내용의 글이다.</p>
<p>웹을 구성하는 요소들이 어디에서부터 시작되었는지를 알게 되면, 어디로 가야 하는지 알 수 있기 때문에 지난 역사에 대한 문맥을 아는 것이 중요하다고 생각해 글을 작성하게 되었다고 그 이유를 밝히고 있다.</p>
<h2><a href="https://developer.mozilla.org/en-US/plus">MDN Plus</a></h2>
<p>MDN에서는 업계의 전문가들이 참여하는 월간 심층 기술적 문서를 제공하는 새로운 유료(월 $10 또는 연 $100 정도의) 프리미엄 서비스인 &quot;MDN Plus&quot;를 계획하고 있다. 기존의 MDN Web Docs는 어떠한 변화도 없이 기존과 같이 무료로 제공될 것임을 밝히고 있다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://www.euismod.dev/">Anyone Can Learn CSS Grid</a></h2>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>CSS Grid의 핵심 요소들을 배울 수 있다. 직접 Grid 속성들에 대한 값을 입력해 렌더링 결과를 즉시 확인할 수 있어, 매우 직관적인 학습을 진행할 수 있다.</p>
<h2><a href="https://css-tricks.com/generating-and-solving-sudokus-in-css/">Generating (and Solving!) Sudokus in CSS</a></h2>
<p>JavaScript 한 줄 없이 스도쿠를 구현한 튜토리얼이다. CSS를 이용한 프로그래밍을 경험해 보기에는 충분한 튜토리얼이다.</p>
<!-- raw HTML omitted -->
<h1>코드와 도구</h1>
<h2><a href="https://github.com/concrete-utopia/utopia">Utopia</a></h2>
<!-- raw HTML omitted -->
<p>디자인과 개발 환경(VSCode)이 통합된 온라인 React 개발 환경 도구로 제공되는 디자인 도구와 작성된 코드를 통해 실시간 편집과 완성된 결과를 미리 보기를 통해 확인할 수 있다.</p>
<p>아직 개발 초기 단계지만, 직접 사용해 볼수 있다. 보다 자세한 내용은 <a href="https://utopia.app/blog">Introducing Utopia</a>를 통해 확인할 수 있다.</p>
<h2><a href="https://domevents.dev/">The DOM Event Visualizer</a></h2>
<p>프레임워크의 사용이 보편화되면서, DOM 이벤트가 어떻게 흐르는지 세부적인 내용을 이해하지 못한 채 이벤트를 다루고 있는 것이 현실이다. 직접적으로 다루지는 않더라도, 이벤트 처리의 본질적인 것은 달라지지 않기 때문에 보다 깊은 이해를 위해선 DOM에서 이벤트가 어떻게 동작하는지를 아는 것은 중요하며, 링크를 통해 제공되는 도구를 통해 시각적인 이벤트 흐름을 쉽게 확인해 볼 수 있다.</p>
<blockquote>
<p>DOM 이벤트에 대해 보다 깊게 이해하고 싶다면, 다음의 무료 온라인 강의 동영상을 참고하라.<br />
<a href="https://egghead.io/courses/the-ultimate-guide-for-understanding-dom-events-6c0c0d23">Your Ultimate Guide to Understanding DOM Events</a></p>
</blockquote>
<h2><a href="https://yare.io/">yare.io</a></h2>
<p>JavaScript 코드 작성을 통해 유닛을 제어하는 실시간 전략 게임이다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://gchq.github.io/CyberChef/">CyberChef</a></h2>
<p>사이버상의 &quot;스위스 아미 나이프&quot;를 표방해, 입력값에 대한 다양한 변환작업(암호화, 인코딩, 등)을 손쉽게 수행할 수 있는 웹 도구다.</p>
<h2><a href="https://github.com/n8n-io/n8n">n8n</a></h2>
<!-- raw HTML omitted -->
<p>Node 기반의 워크플로우 자동화 도구다.</p>
<blockquote>
<p>아래의 데모 동영상에선, GitHub Star에 대한 Slack 알림을 받는 자동화 구성방법을 확인할 수 있다.
<a href="https://www.youtube.com/watch?v=3w7xIMKLVAg">n8n.io - Slack Notification on Github Star</a></p>
</blockquote>
<h2><a href="https://lighthouse-metrics.com/">Lighthouse Metrics</a></h2>
<p>간단하게 사이트의 Lighthouse Metrics를 지역별로 확인해 볼 수 있다. 내가 개발 중인 서비스의 성능 지표를 손쉽게 확인해보자.</p>
<h2><a href="https://github.com/google-map-react/google-map-react">Google Map React</a></h2>
<p>Google Map React를 사용하면, 구글 지도 위에 어떠한 React 컴포넌트라도 렌더링 할 수 있도록 구성할 수 있다.</p>
<h2><a href="https://s-kngstn.github.io/wu-loremipsum/">Wu Tang Lorem Ipsum Text Generator</a></h2>
<p>Vanilla JavaScript로 작성된 텍스트 생성기로 테스트 용도로 간편하게 사용할 수 있다.</p>
<h2><a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments">Better Comments</a></h2>
<p>VS Code Extension으로 Alerts, Query, TODO, Highlight와 같은 다양한 종류의 커멘트를 편집기에서 표현할 수 있다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag">Highlight Matching Tag</a></h2>
<p>HTML 태그 짝을 시각적으로 표시해주는 VS Code Extension 이다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://github.com/depcheck/depcheck">depcheck</a></h2>
<p>depcheck를 통해 실제 사용하지 않거나 누락된 npm 모듈을 확인 할 수 있다. CI에 도입하면 좋은 라이브러리이다.</p>
<pre><code class="language-sh">$&gt; depcheck /path/to/my/project
Unused dependencies
* underscore
Unused devDependencies
* jasmine
Missing dependencies
* lodash
</code></pre>
</content></entry><entry><title>2020-12</title><id>https://github.com/naver/fe-news/blob/master/issues/2020-12.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2020-12.md" rel="alternate"/><content type="xhtml"><h1>2020-12 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://docs.npmjs.com/cli/v7/commands/npm-init">npm-init</a> <code>&lt;initializer&gt;</code></h2>
<p>보통 새로운 프로젝트를 시작할 때, <code>npm init -y</code>를 수행해 기본 값이 지정된 package.json을 만들거나, 또는 특정 프레임워크라면 <code>create-XXX</code>(create-react-app)와 같은 도구를 사용해 프로젝트 스캐폴딩을
통해 시작한다.</p>
<p>스캐폴딩 도구를 자주 사용하는 경우라면, 전역 영역에 설치하고 사용하거나 자주 사용되지 않는
경우라면 <code>npx</code>를 통해 한 번만 다운로드해 실행하는 경우가 일반적이다.</p>
<pre><code class="language-sh">npx create-react-app my-app
</code></pre>
<p>잘 알려지지 않은 사실 중 한 가지는, <code>npm init</code> 명령어를 사용해 보다 간편하게 이 작업을 수행할 수 있다는 점이다. npm <code>v6+</code>부터 <code>&lt;initializer&gt;</code>지정을 통해 외부 도구를 활용한 스캐폴딩을 수행할 수 있다.</p>
<pre><code class="language-sh">npm init &lt;initializer&gt;

npm init foo # ==&gt; npx create-foo
npm init foo -- --hello # ==&gt; npx create-foo --hello
</code></pre>
<p>npm 패키지명이 <code>create-&lt;initializer&gt;</code>와 같이 존재하는 경우, npx를 통해 해당 패키지를 다운로드 후 해당 패키지를 통한 프로젝트 스캐폴딩을 생성한다.</p>
<pre><code class="language-sh">npm init react-app my-app
npm init react-app@3.3.0 my-app

# Yarn의 경우도, 유사한 &quot;yarn create&quot;를 사용할 수 있다.
yarn create react-app my-app # Yarn 0.25+
</code></pre>
<h2><a href="https://blog.isquaredsoftware.com/2020/11/how-web-apps-work-javascript-dom/">How Web Apps Work: JavaScript and the DOM</a></h2>
<p>웹 개발은 넓고 다양한 콘셉트, 정의, 도구 그리고 기술들을 포함한다. 처음 웹 개발 영역에 접근하는 이들은 이들 각각이 어떻게 결합되고 동작하는지 잘 알지 못한 채 시작하는 경우가 대다수다.</p>
<p>이 글에서는 기본적인 웹 개발 개념과 기술들에 대해 무엇인지, 왜 필요한지, 그리고 그것들이 어떻게 서로 연관되어 있는지를 개괄적으로 다룬다.</p>
<h2><a href="https://developer.chrome.com/devsummit/">Chrome Dev Summit 2020</a></h2>
<!-- raw HTML omitted -->
<p>12월 9-10일, 크롬 브라우저와 웹 기술과 관련된 총 26개의 세션으로 구성되어 있는 크롬 개발자 서밋이 진행된다. 올해는 다른 개발자 행사들과 마찬가지로 온라인으로 진행된다.</p>
<p>본 행사에 앞서 12월 7-8일 진행되는 <a href="https://developer.chrome.com/devsummit/schedule/#workshops">워크숍</a>을 통해 각 분야별 전문가들을 통해 직접 새로운 기술들을 배워볼 수도 있다.</p>
<h2><a href="https://dev.to/hymanaharon/why-i-will-no-longer-be-using-console-log-to-check-react-state-updates-29el">Why I will no longer be using console.log() to check React state updates</a></h2>
<!-- raw HTML omitted -->
<p>React 개발을 하다 보면 종종 state를 보기 위해 <code>console.log</code>를 이용할 때가 있다. 하지만, <code>console.log</code>는 가독성 면에서 좋지 않을 때가 많다.
이 글은 <code>console.table</code>과 <code>columns</code> 파라미터를 통해 React state를 좀 더 보기 쉽게 디버깅하는 방법을 설명한다.</p>
<h2><a href="https://snyk.io/blog/10-react-security-best-practices">10 React security best practices</a></h2>
<!-- raw HTML omitted -->
<p>React 환경에서 개발 시 쉽게 놓칠 수 있는 10가지 보안 위협 케이스와 그에 대한 해법을 제시한다.</p>
<h2><a href="https://github.com/microsoft/TypeScript/wiki/TypeScript&#x27;s-Release-Process">TypeScript's Release Process</a></h2>
<p>타입스크립트 팀이 타입스크립트 릴리스 프로세스에 대한 글을 작성하였다. 릴리스 단계, 주기 등을 타입스크립트 팀은 어떻게 관리하는지 엿볼 수 있다.</p>
<h2><a href="https://www.seokjun.kim/react-ssr-the-record-of-pain/">React SSR 그 고통의 기록</a></h2>
<p>운영 중인 서비스에 SSR 적용을 위한 개발 경험을 공유하는 글로, SSR을 통해 성능적인 개선을 이루기도 했지만 많은 리소스를 투입할 만큼 매력적인 기능인지에 대한 의문점을 얘기한다.</p>
<p>SSR이 초기 페이지 렌더링 속도 향상과 SEO를 위해 꼭 적용해야 하는 테크닉처럼 인식되고 있지만, 무조건 적용하면 좋다는 식의 접근보다는 균형 잡힌 접근이 필요함을 확인할 수 있다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://github.com/microsoft/Web-Dev-For-Beginners">Web Development for Beginners - A Curriculum</a></h2>
<!-- raw HTML omitted -->
<p>MS에서 12주, 24개의 강좌로 이루어진 JS, CSS, HTML 기초 수업을 공개했다. 각 강좌마다 퀴즈와 과제, 비디오 등이 포함되어 있어 학습을 돕는다.</p>
<h1>코드와 도구</h1>
<h2><a href="https://github.com/alephjs/aleph.js">aleph</a></h2>
<!-- raw HTML omitted -->
<p>Next.js 영감을 받은 Deno 런타임을 위한 React 프레임워크로, 기본적으로 ESM import 문법 지원을 통해 Next.js와는 다르게 Webpack 또는 그 외 다른 번들러의 사용이 필요하지 않다.</p>
<h2><a href="https://yqnn.github.io/svg-path-editor/">SvgPathEditor</a></h2>
<!-- raw HTML omitted -->
<p>온라인 SVG path 에디터로, path 값만 넣으면 바로 시각화된 모습을 볼 수 있고 직접 편집점들을 조작해 원하는 형태로 수정할 수 있다.</p>
<h2><a href="http://spacetime.how/">spacetime</a></h2>
<!-- raw HTML omitted -->
<p>15kb (gizipped) 크기를 갖는 아주 경량화된(moment-timezone은 98kb) timezone 라이브러리로, moment와 유사한 API를 제공한다.</p>
<pre><code class="language-js">let s = new spacetime('January 5 2018', 'Africa/Djibouti');

s.date() // 5
s.isAsleep() // true
s.time() // '2:30pm'
</code></pre>
<h2><a href="https://joshwcomeau.com/operator-lookup">Operator Lookup</a></h2>
<!-- raw HTML omitted -->
<p>JavaScript의 다양한 연산자들의 사용법과 간단한 예제를 검색해 볼 수 있다.</p>
<h2><a href="https://github.com/Marak/faker.js">faker.js</a></h2>
<p>더미 데이터(fake data)를 생성해 주는 JS 라이브러리이다. address, commerce, company 등 매우 다양한 데이터 형식을 지원한다.</p>
<p>다음은 Browser와 Node 환경에서의 사용 예시이다:</p>
<pre><code class="language-html">&lt;script src = &quot;faker.js&quot; type = &quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    var randomName = faker.name.findName(); // Caitlyn Kerluke
    var randomEmail = faker.internet.email(); // Rusty@arne.info
    var randomCard = faker.helpers.createCard(); // random contact card containing many properties
&lt;/script&gt;
</code></pre>
<pre><code class="language-js">var faker = require('faker');

var randomName = faker.name.findName(); // Rowan Nikolaus
var randomEmail = faker.internet.email(); // Kassandra.Haley@erich.biz
var randomCard = faker.helpers.createCard(); // random contact card containing many properties
</code></pre>
<blockquote>
<p>[참고] 프로젝트의 높은 인기도와는 상관없이 원 개발자는 프로젝트 메인터넌스를 위한 어려움을 겪고 있는 것으로 보이며, 최근 라이브러리 사용을 원하는 기업들은 비용을 지불하거나 포크 하라고 선언하기도 했다.</p>
<ul>
<li><a href="https://github.com/Marak/faker.js/issues/1046">No more free work from Marak - Pay Me or Fork This</a></li>
</ul>
</blockquote>
<h2><a href="https://github.com/kpdecker/jsdiff">jsdiff</a></h2>
<p>문자열 비교(diff) Javascript 라이브러리이다. 다음과 같이 간단한 로직으로 문자열 비교 결과를 출력할 수 있다:</p>
<pre><code class="language-js">require('colors');
const Diff = require('diff');

const one = 'beep boop';
const other = 'beep boob blah';

const diff = Diff.diffChars(one, other);

diff.forEach((part) =&gt; {
  // green for additions, red for deletions
  // grey for common parts
  const color = part.added ? 'green' :
    part.removed ? 'red' : 'grey';
  process.stderr.write(part.value[color]);
});

console.log();
</code></pre>
<!-- raw HTML omitted -->
</content></entry><entry><title>2021-05</title><id>https://github.com/naver/fe-news/blob/master/issues/2021-05.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2021-05.md" rel="alternate"/><content type="xhtml"><h1>2021-05 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://pustelto.com//blog/css-vs-css-in-js-perf/">Real-world CSS vs. CSS-in-JS performance comparison</a></h2>
<p>CSS-in-JS는 Front-end 개발 영역에 확고한 한자리를 차지해 나가고 있어 보이며, 특히나 React 영역에서 더 두드러져 보인다.</p>
<blockquote>
<p>매해 조사되는 &quot;<a href="https://2020.stateofcss.com/en-US/technologies/css-in-js/">State of CSS 2020</a>&quot; 설문조사에서는 대표적인 CSS-in-JS 도구인 <a href="https://styled-components.com/">Styled Components</a>를 들어본 적이 없다고 답변한 이는 14.3%에 불과해 CSS-in-JS는 이제 널리 알려진 개발 방식이라 말할 수 있어 보인다.</p>
</blockquote>
<p>이 글은 주요 CSS-in-JS 라이브러리들에 대한 현실 세계(real-world) 애플리케이션에서의 성능 비교를 소개한다. 그러나 CSS-in-JS는 어떤 식으로든 로딩 성능(JS 파일 크기가 작은 것이 더 나은 성능을 기대)에 영향을 미칠 수밖에 없기 때문에, 로딩 성능에 민감하다면 CSS-in-JS는 여러분의 선택지가 아닐 수도 있다.</p>
<h2><a href="https://www.baseclass.io/guides/string-handling-modern-js">Working With Strings in Modern JavaScript</a></h2>
<p>이 가이드는 JavaScript에서 문자열을 다루기 위해 필요한 모든 내용을 담고 있으며, 문자열의 생성, 조작 그리고 비교 방법에 대한 모든 내용을 다루고 있다.</p>
<h2><a href="https://blog.sentry.io/2021/04/12/slow-and-steady-converting-sentrys-entire-frontend-to-typescript">Slow and Steady: Converting Sentry’s Entire Frontend to TypeScript</a></h2>
<!-- raw HTML omitted -->
<p>오류 로깅 플랫폼/도구인 Sentry가 모든 코드 베이스를 JavaScript에서 TypeScript로 전환한 경험을 소개하는 글로, 12명 이상의 엔지니어링 팀이 참여해 1.1k 여개의 파일들에서 95k 라인에 대한 코드들에 대한 작업이 진행되었다고 한다.</p>
<h2><a href="https://storybook.js.org/blog/how-to-actually-test-uis/">How to actually test UIs</a></h2>
<!-- raw HTML omitted -->
<p>UI를 테스트하는 것은 쉽지 않은 일이다. 매 릴리스마다 새롭고 많은 기능들로 인해 UI와 상태는 비례해서 증가하고, 모든 테스트 도구들은 &quot;쉽고, 빠르고, 잘 흐트러지지 않는&quot; 테스트를 만들 수 있다고 말하지만 현실은 그렇지 않다.</p>
<p>Storybook  커뮤니티 내의 10개 팀들이 사용하는 UI 테스트 테크닉을 통해 어떻게 실용적인 테스트 전략을 만들 수 있는지를 소개한다.</p>
<h2><a href="https://apechkurov.medium.com/v8-deep-dives-random-thoughts-on-math-random-fb155075e9e5">[V8 Deep Dives] Random Thoughts on Math.random()</a></h2>
<p>V8에서 <code>Math.random</code>을 ECMA specification부터 <code>torque</code>, <code>C++</code>로 되어있는 구현 로직을 따라가 본다.
이를 통해 왜 <code>Math.random</code>이 보안상  사용하면 안 되는지 확인해 준다.</p>
<p>V8에 대해서 관심이 생겼다면 아래 글들을 추가로 읽어볼 것을 추천한다.</p>
<ul>
<li><a href="https://itnext.io/v8-deep-dives-understanding-array-internals-5b17d7a28ecc">[V8 Deep Dives] Understanding Array Internal</a></li>
<li><a href="https://itnext.io/v8-deep-dives-understanding-map-internals-45eb94a183df">[V8 Deep Dives] Understanding Map Internals</a></li>
</ul>
<h2><a href="https://medium.com/naver-place-dev/javascript-closure%EB%8A%94-private-%EB%B3%80%EC%88%98-%EB%A7%8C%EB%93%9C%EB%8A%94-%EC%9A%A9%EB%8F%84%EC%9D%B8%EA%B0%80-d5868489c421">Javascript Closure는 Private 변수 만드는 용도인가?</a></h2>
<!-- raw HTML omitted -->
<p>Javascript Closure에 대해서 어떻게 접근하면 좋을지에 대한 좋은 방향을 제시해 준다.
페이스북 <code>React Korea</code>그룹의 댓글에 좋은 의견이 있어 링크를 첨부한다.
https://www.facebook.com/groups/react.ko/permalink/2834835133443307/</p>
<h2><a href="https://so-so.dev/react/form-handling/">입력을 다루는 다양한 방법</a></h2>
<!-- raw HTML omitted -->
<p>React에서는 Form의 수가 많아질수록 코드와 상태 관리가 복잡해지고 어려우며, 성능 문제를 겪을 수 있다.
이 문제를 해결하기 위해 <code>useImperativeHandle</code> , <code>Uncontrolled Component</code>을 설명하고, 이런 부분이 고려되어 있는 <code>react-hook-form</code>을 소개한다.</p>
<h2><a href="https://blog.bitsrc.io/webpacks-hot-module-replacement-feature-explained-43c13b169986">Webpack’s Hot Module Replacement Feature Explained</a></h2>
<!-- raw HTML omitted -->
<p>Webpack에서 HMR이 왜 생겼는지, HMR이 어떤 방식으로 일어나는지 간단하게 설명하고, 설정하는 방법을 알려준다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://www.youtube.com/watch?v=CY0HE277IBM">JavaScript Game For Beginners: Sprite Animation</a></h2>
<!-- raw HTML omitted -->
<p>실제 게임 개발에서 많이 사용하는 Image Sprites 기법을 JavaScript canvas로 구현한 과정을 담은 영상이다.
해당 유튜브 채널에 Javascript로 만드는 게임, 애니메이션에 대한 자료가 많으니 관심이 있다면 확인해봐도 좋다.</p>
<h1>코드와 도구</h1>
<h2><a href="https://dorey.github.io/JavaScript-Equality-Table/">Equality in JavaScript</a></h2>
<p>JavaScript 문법을 통해 동등 연산자(<code>==</code>)를 수행하는 경우, 생각했던 것과는 다른 당황스러운 결과를 얻게 될 때가 있다.</p>
<pre><code class="language-js">[] == &quot;&quot; // true
[] == 0 // true
undefined == null // true
...
// 그만 알아보도록 하자. -,-
</code></pre>
<p>어떤 값과 비교했을 때 true/false 인지 잘 기억나지 않는다면 비교 테이블을 통해 확인해 보자.
추가로 다양한 사례들과 설명을 모아둔 <a href="https://github.com/denysdovhan/wtfjs">wtfjs</a>도 확인해 보자.</p>
<h2><a href="https://dev.to/mokkapps/debug-why-react-re-renders-a-component-3i8e">Debug Why React (Re-)Renders a Component</a></h2>
<!-- raw HTML omitted -->
<p>React의 렌더링, Virtual Dom을 간단히 설명하고, 렌더링이 된 이유를 알 수 있는 툴을 알려준다.</p>
<ul>
<li>렌더링을 시각화: <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React DevTools</a>의 설정</li>
<li>렌더링 된 이유: React DevTools의 Profiler</li>
<li>hook의 렌더링 된 이유   <a href="https://github.com/welldone-software/why-did-you-render">Why Did You Render</a></li>
</ul>
<p>이 글을 통해 React가 Component를 다시 렌더링 하는 이유와 동작을 시각화하고 디버깅하는 방법을 알 수 있다.</p>
<h2><a href="https://dmitripavlutin.com/parseint-mystery-javascript">Solving a Mystery Behavior of parseInt() in JavaScript</a></h2>
<!-- raw HTML omitted -->
<p><code>parseInt</code>가 아래 코드의 경우 의도대로 동작하지 않는 원인을 알아본다.</p>
<pre><code class="language-js">parseInt(0.0000005); // =&gt; 5
parseInt(999999999999999999999); // =&gt; ? 
</code></pre>
<h2><a href="https://seanbarry.dev/posts/switch-true-pattern">Using the Switch(true) Pattern in JavaScript</a></h2>
<p>switch true 패턴에 대해서 설명하고 이것이 언제 유용한지 알려준다.</p>
<pre><code class="language-js">switch (true) {
  case !user:
    throw new Error(&quot;User must be defined.&quot;);
  case !user.firstName:
    throw new Error(&quot;User's first name must be defined&quot;);
  case typeof user.firstName !== &quot;string&quot;:
    throw new Error(&quot;User's first name must be a string&quot;);
  // ...lots more validation here
  default:
    return user;
}
</code></pre>
<h2><a href="https://github.com/rangav/thunder-client-support">Thunder Client</a></h2>
<!-- raw HTML omitted -->
<p>VS Code 플러그인으로 Rest API 클라이언트 도구로 유명한 <a href="https://www.postman.com/">Postman</a>과 유사한 기능들을 제공한다.</p>
<h2><a href="https://github.com/vercel/pkg">Pkg</a></h2>
<!-- raw HTML omitted -->
<p>Next.js를 개발한 Vercel에서 개발한 도구로, 개발한 Node.js 패키지를 Node.js가 설치되지 않은 환경에서도 실행 가능한 파일로 만들어 준다.</p>
<h2><a href="https://github.com/appsmithorg/appsmith">Appsmith</a></h2>
<!-- raw HTML omitted -->
<p>JavaScript 기반의 비주얼 개발 플랫폼으로 내부 도구들을 빠르고 쉽게 만들 수 있게 한다. 빌트인 된 위젯들을 드래그 드롭으로 끌어다 놓은 후, 서비스의 API를 연결하는 것만으로 상호작용하는 페이지를 생성할 수 있다.</p>
</content></entry><entry><title>2021-04</title><id>https://github.com/naver/fe-news/blob/master/issues/2021-04.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2021-04.md" rel="alternate"/><content type="xhtml"><h1>2021-04 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://builtformars.com/clubhouse-conversations/">Finding conversations on Clubhouse</a></h2>
<!-- raw HTML omitted -->
<p>최근 가장 인기 있는 음성 기반의 소셜 네트워크 앱인 Clubhouse는 많은 이들에게 회자되고 있다.</p>
<p>UX는 FE 관점에서도 매우 주요한 영역 중 하나이기 때문에, Clubhouse의 UX 사례 분석을 통해 좋은 UI/UX를 적용할 수 있는 인사이트를 얻을 수 있지 않을까?</p>
<h2><a href="https://web.dev/mini-apps/">Mini apps</a></h2>
<!-- raw HTML omitted -->
<p>Mini apps는 일반적으로 4MB 내외의 크기를 가지며, 실행되기 위한 <a href="https://web.dev/mini-app-super-apps/#for-mini-apps-you-need-super-apps">super app</a>을 필요로 한다. 이들은 웹 기술(HTML, CSS, JS)을 기반으로 구축된다. (예: WeChat, Line 등과 같은 메신저에서 설치 없이 바로 실행 가능한 다양한 미니 앱들이 이에 속한다.)</p>
<p>브라우저(mini apps의 런타임은 super app의 WebView)에서 직접 실행은 되는 것은 아니지만, 웹 기술이 사용되므로 또 다른 의미에서의 Front-end 기술 사용 확대라 할 수 있다.</p>
<p>이 글에선 Mini apps의 개론적인 부분과 개발에 필요한 도구 및 생태계 등을 모두 훑어볼 수 있다.</p>
<h2><a href="https://www.liftosaur.com/blog/posts/offline-mode-in-liftosaur/">Offline mode in Liftosaur</a></h2>
<!-- raw HTML omitted -->
<p>PWA 앱의 가장 주요한 이점 중에 하나는 바로 오프라인 모드를 활성화할 수 있다는 점이다. 캐싱은 <a href="https://developer.mozilla.org/ko/docs/Web/API/Service_Worker_API">Service Worker</a>를 통해 구현되며, 이미 수많은 튜토리얼과 사례들을 온라인에서 찾아볼 수 있다. 그러나 캐싱은 오프라인 모드를 구현하기 위한 빙산의 일각으로, 제대로 동작하는 오프라인 앱을 만들기 위해선 더 많은 고려와 작업들이 필요하다.</p>
<p>이 글은 역도 운동 트래킹 앱인 <a href="https://www.liftosaur.com/about/">Liftosaur</a> 개발팀에선 어떻게 오프라인 모드 지원을 추가했는지, 그리고 현실적 고려 사항들이 무엇인지 설명한다.</p>
<h2><a href="https://davidwalsh.name/react-authentication-2">React authentication, simplified</a></h2>
<p>권한 인증은 항상 많은 노력이 필요한 영역이다. 이 문서에서는 React 애플리케이션에서 인증(및 액세스 제어, SSO 등)에 대한 다른 접근 방식을 설명한다.</p>
<p>구현/적용 시마다 최신 상태로 유지하거나 다시 조사가 필요한 정적 라이브러리 추가 방식 대신, 자동으로 최신 상태로 유지되고 <a href="https://auth0.com/docs/">Auth0</a>, <a href="https://www.okta.com/">Okta</a> 및 기타 기능보다 훨씬 간단한 대체 서비스(<a href="https://userfront.com/">https://userfront.com/</a>)를 사용하는 방법을 소개한다.</p>
<h2><a href="https://dev.to/anmshpndy/functional-javascript-fundamentals-44f2">Fundamentals of Functional JavaScript</a></h2>
<!-- raw HTML omitted -->
<p>이 문서는 JavaScript 애플리케이션과 관련된 함수형 프로그래밍에 대한 기본 사항을 설명하는 것과 함께 다음을 이해하기 위한 목표를 갖고 있다.</p>
<ul>
<li>함수란 무엇인가?</li>
<li>함수(Functions) vs 프러시저(Procedures)</li>
<li>선언적(Declarative) vs 명령적(Imperative)</li>
<li>함수 입력과 출력에 대한 이해</li>
</ul>
<h2><a href="https://css-tricks.com/react-component-tests-for-humans/">React Component Tests for Humans</a></h2>
<p>React에서 유지보수하기 쉬운 컴포넌트 테스트 코드를 작성하는 것은 매우 어려운 일이다. 이 글에서는 다음 세 단계로 이루어진 패턴을 통해 가독성이 좋은 컴포넌트 테스트를 작성하는 방법에 대해 설명한다.</p>
<ul>
<li>
<ol>
<li>Arrange: 컴포넌트 props를 준비한다.</li>
</ol>
</li>
<li>
<ol start="2">
<li>Act: 컴포넌트를 렌더하고 사용자의 이벤트를 코드로 발생시킨다.</li>
</ol>
</li>
<li>
<ol start="3">
<li>Assert: 기댓값을 설정해서 컴포넌트가 정상적으로 동작하는지 확인한다.</li>
</ol>
</li>
</ul>
<h2><a href="https://overreacted.io/before-you-memo/">Before You <code>memo()</code></a></h2>
<p>React에서 성능을 최적화하기 위해 <code>memo</code> 혹은 <code>useMemo</code>를 사용하는 경우가 많다. 하지만 Dan Abramov는 <code>memo</code>를 무작정 사용하기 전에 <code>memo</code>를 사용하지 않는 두가지 기초적인 성능 최적화 방법을 소개한다.</p>
<p>이 글에서 설명하는 패턴을 적용하면 성능 향상 뿐만 아니라 애플리케이션의 데이터 흐름을 더 쉽게 파악할 수 있을 것이다.</p>
<blockquote>
<p>[참고] <a href="https://kentcdodds.com/blog/optimize-react-re-renders">One simple trick to optimize React re-renders</a></p>
</blockquote>
<h2><a href="https://web.dev/javascript-this">JavaScript: What is the meaning of this?</a></h2>
<!-- raw HTML omitted -->
<p>JavaScript에서 <code>this</code>는 굉장히 복잡한 개념이다. 이 글에서는 <code>if (…) … else if () … else if (…) …</code> 식으로 다음과 같이 케이스를 나누어서 <code>this</code>를 설명한다.</p>
<ul>
<li>
<ol>
<li>화살표 함수를 사용하는 경우</li>
</ol>
</li>
<li>
<ol start="2">
<li><code>new</code>와 함께 함수/클래스가 호출되는 경우</li>
</ol>
</li>
<li>
<ol start="3">
<li><code>bind</code> 메서드를 사용하는 경우</li>
</ol>
</li>
<li>
<ol start="4">
<li>호출되는 시점에 <code>this</code>가 설정되는 경우</li>
</ol>
</li>
<li>
<ol start="5">
<li>상위 객체에서 함수를 호출하는 경우</li>
</ol>
</li>
<li>
<ol start="6">
<li>함수 혹은 상위 스코프가 <code>strict mode</code> 내에 있는 경우</li>
</ol>
</li>
<li>
<ol start="7">
<li>그 외 경우</li>
</ol>
</li>
</ul>
<blockquote>
<p>[참고] <a href="https://hyperflow.dev/Frontend/Javascript-this">한글 번역</a></p>
</blockquote>
<h2><a href="https://developer.chrome.com/blog/css-in-js/">CSS-in-JS support in DevTools</a></h2>
<!-- raw HTML omitted -->
<p>구글은 Chrome 85 버전부터 <a href="https://developer.chrome.com/docs/devtools/">개발자도구</a>에서 CSS-in-JS 프레임워크를 위한 스타일 수정 기능을 지원했다. 개발자도구의 스타일 창에서 어떻게 CSS-in-JS 규칙 수정 기능을 추가했는지 설명하는 글이다.</p>
<h2><a href="https://medium.com/wantedjobs/%EC%9B%B9-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-ssr-cache-%EC%A0%81%EC%9A%A9%EA%B8%B0-bf022e3a1a72">웹 성능 최적화 SSR + Cache 적용기</a></h2>
<!-- raw HTML omitted -->
<p>웹 애플리케이션의 성능은 매출에도 영향을 미친다. 또한, 구글은 사이트 순위를 지정할 때 속도를 중요한 요소로서 고려한다.</p>
<p>이 글에서는 SSR과 Cache를 적용해서 웹 성능을 최적화한 경험을 공유하고 있다.</p>
<h2><a href="https://github.blog/2021-03-25-how-github-actions-renders-large-scale-logs/">How GitHub Actions renders large-scale logs</a></h2>
<!-- raw HTML omitted -->
<p>GitHub 프로젝트들의 개발 워크플로 자동화를 구성할 수 있는 GitHub Actions에서 대용량 로그 렌더링 개선을 위한 여정을 소개한다.</p>
<p>대용량의 로그를 한 번에 렌더링 하는 것은 성능적으로 좋지 않기 때문에, UI 가상화를 통해 뷰포트를 통해 노출되는 영역 만을 렌더링 하는 것과 최소 5만 라인을 갖는 로그를 문제없이 렌더링 하는 자체 라이브러리 개발에 이르게 된 배경 등을 설명한다.</p>
<h2><a href="https://web.dev/compat2021/">Compat2021</a></h2>
<p>브라우저 벤더들인 Google, Mozilla 그리고 Microsoft은 브라우저 호환성 이슈 해결이 시급한 TOP 5 항목들에 대해 2021년 내 호환성 이슈를 해결하기 위한 작업 파트너십을 구성하는데 합의했다.</p>
<p>연내 해결하기로 합의한 TOP 5 이슈들은 주로 CSS 영역이며, 다음과 같다.</p>
<ul>
<li>CSS Flexbox</li>
<li>CSS Grid</li>
<li>position: sticky</li>
<li>aspect-ratio</li>
<li>CSS transforms</li>
</ul>
<blockquote>
<p>[참고] <a href="https://wpt.fyi/compat2021">Compat 2021 Dashboard</a>를 통해 각 브라우저들에서의 TOP 5 지원에 대한 테스트 수행 점수를 확인해 볼 수 있다.</p>
</blockquote>
<h2><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.ko-KR.md">You (Might) Don't Need jQuery</a></h2>
<p>React, Vue 등의 프런트엔드 라이브러리가 나타나면서 jQuery 사용은 점차 줄어들고 있다. 본 글에서는 jQuery가 제공하던 대부분의 기능을 네이티브로서 대체하는 방법을 제시한다.</p>
<h2><a href="https://jbee.io/react/error-declarative-handling-0/">효율적인 프런트엔드 에러 핸들링</a></h2>
<!-- raw HTML omitted -->
<p>서비스를 개발할 때 에러 핸들링은 빼놓을 수 없는 관심사다. React에서 사용자 경험을 고려하면서 효율적으로 에러를 처리했던 경험을 공유한 글이다.</p>
<p>이 글에서는 다음과 같이 세 개의 글을 시리즈로 묶어 설명하고 있다.</p>
<ul>
<li>
<ol>
<li><a href="https://jbee.io/react/error-declarative-handling-1/">React에서 선언적으로 비동기 다루기</a></li>
</ol>
</li>
<li>
<ol start="2">
<li><a href="https://jbee.io/react/error-declarative-handling-2/">클라이언트의 사용자 중심 예외 처리</a></li>
</ol>
</li>
<li>
<ol start="3">
<li><a href="https://jbee.io/react/error-declarative-handling-3/">선언적으로 에러 상황 제어하기</a></li>
</ol>
</li>
</ul>
<h1>튜토리얼</h1>
<h2><a href="https://www.sitepoint.com/beyond-console-log-level-up-your-debugging-skills/">Beyond Console.log() – Level up Your Debugging Skills</a></h2>
<!-- raw HTML omitted -->
<p>브라우저의 개발자도구는 디버깅할 때 도움이 되는 여러 강력한 기능을 가지고 있다.</p>
<p>이 글에서 설명하는 개발자도구의 강력한 기능을 익히면 디버깅 능력을 한층 더 끌어올릴 수 있을 것이다.</p>
<h2><a href="https://www.freecodecamp.org/news/fetch-data-react/">How to Fetch Data in React: Cheat Sheet + Examples</a></h2>
<!-- raw HTML omitted -->
<p>이 글은 React에서 HTTP 요청을 통해 데이터를 fetch하는 방법 다섯 가지를 예제 코드와 함께 설명한다.</p>
<h2><a href="https://www.codeinwp.com/blog/css-grid-tutorial-layout/">The Ultimate CSS Grid Tutorial for Beginners (With Interactive Examples)</a></h2>
<!-- raw HTML omitted -->
<p>Grid Layout 명세의 주요한 기능을 많은 CodePen 예제와 함께 설명한다.</p>
<h2><a href="https://ui.toast.com/weekly-pick/ko_20210303">국제화(i18n) 자동화 가이드</a></h2>
<!-- raw HTML omitted -->
<p>글로벌 서비스를 지원하는 웹 애플리케이션에서 국제화(i18n)는 필수적이다. 국제화를 지원할 때 개발과 번역 과정에서 반복적인 수동 작업으로 인해 고통 받기 쉽다.</p>
<p>이 가이드에서는 구글 스프레드 시트와 <code>i18next</code>, <code>i18next-scanner</code> 라이브러리를 활용하여 단 몇개의 스크립트로 효율적인 협업과 프로세스 자동화를 이룬 방법에 대해 설명하고 있다.</p>
<h1>코드와 도구</h1>
<h2><a href="https://stoxy.dev/">Stoxy</a></h2>
<!-- raw HTML omitted -->
<p>웹 컴포넌트가 장착된 반응형 상태 관리자 시스템으로, 상태들은 인 브라우저(in-browser)의 IndexedDB 데이터베이스에 저장하며, 마지막 접근된 5개 객체들만 인 메모리(in-memory)를 사용하도록 구성된다.</p>
<pre><code class="language-js">// Write
import { write } from &quot;@stoxy/core&quot;;

write(&quot;Shoppingcart&quot;, [{ id: 123, name: &quot;Free gift&quot; }]);

// Read
import { read } from &quot;@stoxy/core&quot;;

async function getItems() {
  const items = await read(&quot;shoppingcart&quot;);
  return items;
}

// Clear
import { clear } from &quot;@stoxy/core&quot;;

clear(&quot;shoppingcart&quot;);
</code></pre>
<h2><a href="https://github.com/ahuth/raycast">Raycast</a></h2>
<!-- raw HTML omitted -->
<p>Canvas를 사용하지 않고, React와 HTML로 구성된 Raycasting(광선 투사) JavaScript 엔진이다.</p>
<blockquote>
<p>[참고] <a href="https://ahuth.github.io/raycast/">라이브 데모</a></p>
</blockquote>
<h2><a href="https://github.com/KiwiTalk/KiwiTalk">KiwiTalk</a></h2>
<!-- raw HTML omitted -->
<p>React, Typescript로 개발된 크로스플랫폼 비공식 카카오톡 클라이언트</p>
<h2><a href="https://github.com/github/github-elements">github-elements</a></h2>
<p>GitHub의 웹 컴포넌트 컬렉션으로, 현재 16개의 커스텀 엘리먼트들이 제공되고 있다.</p>
<h2><a href="https://github.com/toplenboren/simple-git-hooks">simple-git-hooks</a></h2>
<p>Git Hook의 대표 주자인 husky에 비해 의존성 없는 가벼운 용량의 hook 라이브러리다.</p>
<p>패키지 설치 후, 간단하게 <code>package.json</code>에 커밋 훅을 작성하면 된다. 다음은 커밋 전에 linter를 수행하고 푸시 시점에 formatter를 수행하도록 하는 예제다.</p>
<pre><code class="language-js">// package.json
 &quot;simple-git-hooks&quot;: {
    &quot;pre-commit&quot;: &quot;npx lint-staged&quot;,
    &quot;pre-push&quot;: &quot;cd ../../ &amp;&amp; npm run format&quot;
  }
</code></pre>
<h2><a href="https://github.com/zthxxx/react-dev-inspector">React Dev Inspector</a></h2>
<!-- raw HTML omitted -->
<p>브라우저에서 React 컴포넌트를 클릭하면 로컬 IDE의 해당 컴포넌트 코드로 편리하게 이동시켜주는 도구다.</p>
<h2><a href="https://shepherdjs.dev/">Shepherd.js</a></h2>
<!-- raw HTML omitted -->
<p>사용자에게 웹 애플리케이션 사용법을 쉽게 보여줄 수 있도록 도와주는 자바스크립트 라이브러리다. React, Vue, Angular 등 주요 자바스크립트 프레임워크를 위한 Wrapper 라이브러리도 개발되어있다.</p>
<h2><a href="https://dndkit.com/">dnd kit</a></h2>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>React에서 사용할 수 있는 가볍고 성능과 확장성이 좋은 drag &amp; drop 라이브러리다.</p>
<h2><a href="https://www.akashmittal.com/gui-utility-to-generate-react-table-code/">GUI tool to generate React-Table code for your projects</a></h2>
<p>페이지네이션, 정렬, 검색, 필터 기능을 가지고 있는 React 테이블 코드를 생성할 수 있게 해주는 웹 애플리케이션이다. 여러 기능을 가진 테이블을 개발할 때 생성된 코드를 참고해 유용하게 활용할 수 있다.</p>
<h2><a href="https://svelte.nodegui.org/">Svelte NodeGUI: Build Cross Platform Apps with Node and Svelte</a></h2>
<!-- raw HTML omitted -->
<p><a href="https://github.com/nodegui/nodegui">NodeGUI</a>는 <a href="https://www.qt.io/download">Qt5</a> 기반의 크로스플랫폼 데스크톱 애플리케이션 개발 도구다. NodeGUI는 Chromium 기반의 <a href="https://www.electronjs.org/">electron</a>보다 CPU와 메모리를 더 효율적으로 활용한다고 알려져 있다.</p>
<p>기존에 React용 렌더러인 <a href="https://github.com/nodegui/react-nodegui">React NodeGUI</a>와 Vue용 렌더러인 <a href="https://github.com/nodegui/vue-nodegui">Vue NodeGUI</a>가 존재했는데 최근 Svelte용 렌더러인 <a href="https://github.com/nodegui/svelte-nodegui">Svelte NodeGUI</a>가 릴리즈되었다.</p>
<h2><a href="https://marketplace.visualstudio.com/items?itemName=AlexShen.classdiagram-ts">classdiagram-ts (VS Code 플러그인)</a></h2>
<!-- raw HTML omitted -->
<p>TypeScript로 UML 클래스 다이어그램을 자동으로 생성해주는 VS Code 플러그인이다.</p>
<h2><a href="https://github.com/nodeca/probe-image-size">probe-image-size</a></h2>
<p>이미지는 웹에서 가장 많은 리소스를 차지하는 요소 중 하나이다. 만약, 이미지의 크기만 필요한 경우라면 이미지 전체를 다운로드하는 것은 낭비일 수 있다. 특히나 큰 이미지라면 더더욱 그렇다.</p>
<p>이 라이브러리는 이미지 전체를 다운로드하지 않고, 크기와 정보를 조회할 수 있는 라이브러리다.</p>
</content></entry><entry><title>2021-08</title><id>https://github.com/naver/fe-news/blob/master/issues/2021-08.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2021-08.md" rel="alternate"/><content type="xhtml"><h1>2021-08 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://pascalpares.appspot.ovh/webassembly-for-javascript-developers/">An Introduction to WebAssembly for JavaScript Developers</a></h2>
<p>이 문서는 JavaScript WebAssembly 인터페이스에 대한 소개 글로 JavaScript 코드가 wasm과 어떻게 상호작용하는지와 함께 래퍼(<a href="https://github.com/emscripten-core/emscripten">Emscripten</a> 도구 등을 통해 생성된)를 통한 구현 방식에  대해도 설명한다.</p>
<blockquote>
<p>wasm에 관심이 생겼다면, 이어서 15k 라인의 C++ 코드로 작성된 <a href="https://cyberbotics.com/">렌더링 엔진</a>을 wasm 변환기 글도 재미있게 읽을 수 있을 것이다.<!-- raw HTML omitted -->
<a href="https://medium.com/cyberbotics/porting-a-c-rendering-engine-to-webassembly-9c32d76c31f1">Porting a C++ Rendering Engine to WebAssembly</a></p>
</blockquote>
<h2><a href="https://dev.to/bcoe/esm-doesn-t-need-to-break-the-ecosystem-4p8b">ESM doesn't need to break the ecosystem</a></h2>
<p>오랜 시간 동안 npm 패키지를 다루는 환경에서 개발해 왔다면 모듈 사용과 관련해선 CommonJS(<code>require()</code>) 문법이 ESM 보다 더 친숙할 것이다. 그러나 CommonJS는 표준 영역에 속하지 않으며, ESM 등장 이후로 전체 생태계는 점진적으로 ESM으로 전환이 이뤄질 것이다.</p>
<p>이 글은 CommonJS 패키지를 순수 ESM 패키지로 전환하는 방법과 생태계 호환성을 위한 <a href="https://nodejs.org/api/packages.html#packages_dual_commonjs_es_module_packages">Dual CJS/ESM 모듈 패키지</a>를 어떻게 만들 수 있는지 설명한다.</p>
<blockquote>
<p>순수(Pure) ESM 패키지가 무엇인지, 그리고 현실적 이슈들에 대해 궁금하다면 다음 링크를 추가로 참고하라.<!-- raw HTML omitted -->
<a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c">Pure ESM package</a></p>
</blockquote>
<h2><a href="https://tsh.io/blog/finite-state-machines-in-react/">How to use finite state machines in React?</a></h2>
<p>Finite state machines(<a href="https://ko.wikipedia.org/wiki/%EC%9C%A0%ED%95%9C_%EC%83%81%ED%83%9C_%EA%B8%B0%EA%B3%84">유한 상태 기계</a>)는 시스템의 상태(행위)를 기술하는데 사용되는 수학적 모델이다. 주어진 객체가 가질 수 있는 모든 상태와 상태 간의 전환을 다루며, 기본 규칙은 상태 시스템은 한 번에 하나의 상태에만 있을 수 있다는 것이다. (현실 세계에서의 예는 신호등을 떠올려 볼 수 있다.)</p>
<p>이 글은 React 프로젝트의 일반적 상태 관리에서 finite state machine을 사용으로 전환하는 예제를 통해 보다 안정성 높은 코드를 작성하는 방법을 소개한다.</p>
<h2><a href="https://openjsf.org/openjs-world-2021/">OpenJS World 2021</a></h2>
<!-- raw HTML omitted -->
<p>지난 6월, 리눅스 재단 산하의 OpenJS 재단이 해마다 주최하는 콘퍼런스로 총 6개 트랙의 다양한 양질의 JavaScript 생태계 관련 세션들을 확인해 볼 수 있다.</p>
<h2><a href="https://dev.to/arcanis/yarn-3-0-performances-esbuild-better-patches-e07">Yarn 3.0 🚀🤖 Performances, ESBuild, Better Patches, ...</a></h2>
<p>패키지 관리자인 Yarn의 차기 메이저 릴리스인 3.0에 대한 작업이 시작되었고, 어떤 기능들이 포함될지를 소개하는 글이다.</p>
<p>Yarn 1 → 2로의 마이그레이션 과정에서의 불편함을 제거해, 모든 버전에서 3으로의 마이그레이션을 쉽게 만들고, Node 10+ 이상의 버전을 지원할 계획이라고 밝히고 있다.</p>
<blockquote>
<p>[참고] <a href="https://medium.com/wantedjobs/yarn-berry-%EC%A0%81%EC%9A%A9%EA%B8%B0-1-e4347be5987">yarn berry 적용기</a></p>
</blockquote>
<h2><a href="https://alexsidorenko.com/blog/react-render-always-rerenders/">A Visual Guide to React Rendering - It Always Re-renders</a></h2>
<!-- raw HTML omitted -->
<p>React 애플리케이션 구조와 상탯값 변경에 따라 컴포넌트별 재 렌더링이 발생하는 과정을 시각적 예제를 통해 보여주고, React.memo를 통해 불필요한 재 렌더링을 방지할 수 있는지 설명한다.</p>
<blockquote>
<p>상탯값에 이어, props를 다룬 글도 이어서 보면 좋다.<!-- raw HTML omitted -->
<a href="https://alexsidorenko.com/blog/react-render-props/">A Visual Guide to React Rendering - Props</a></p>
</blockquote>
<h2><a href="https://exploringjs.com/deep-js/toc.html">Deep JavaScript: Theory and techniques</a></h2>
<!-- raw HTML omitted -->
<p>언어(JavaScript)를 보다 잘 다룰 수 있는 실용적인 기법들과 ECMAScript 스펙에 기반한 언어적 측면에서의 동작과 그 이유에 대해 설명하는 책이다. (HTML 버전은 무료로 제공된다.)</p>
<p>프레임워크나 도구 환경 등이 아닌 JavaScript를 보다 깊게 이해하고 잘 다루고 싶은 이에게 큰 도움이 될 것이다.</p>
<h2><a href="https://portal.gitnation.org/contents/vite-rethinking-frontend-tooling">Vite: Rethinking Frontend Tooling</a></h2>
<p><a href="https://github.com/vitejs/vite">Vite</a>는 Vue.js 개발자인 Evan You가 새롭게 개발한 빌드 도구로, 개발 시에는 번들링을 수행하지 않고 ESM을 통해 필요한 모듈만 로딩하고 이후 프로덕션 빌드는 Rollup을 사용한다.</p>
<p>Evan You는 온라인 세션을 통해 프로젝트의 자세한 배경(기술적 세부사항 및 설계 과정)을 소개하며, Vite를 통해 무엇을 해결하는지 왜 빠른지 그리고 JS 도구 영역에 왜 더 적합한지 설명한다.</p>
<h2><a href="https://developer.chrome.com/blog/renderingng/">RenderingNG</a></h2>
<!-- raw HTML omitted -->
<p>Chrome 개발팀은 지난 8년여의 작업을 통해 Chromium의 Blink 렌더링 엔진을 새롭게 재설계한 아키텍처인 <a href="https://developer.chrome.com/blog/renderingng/">RenderingNG</a>(Next Generation)를 공개했다.</p>
<p>RenderingNG은 보다 안정적인 렌더링 성능을 구현하는 것에 있으며, 예측 가능하고 신뢰할 수 있는 성능, 하드웨어 기능 사용의 극대화, 표시되는 내용에 필요한 작업만을 수행, 렌더링 비용을 관리할 수 있는 개발자 APIs 제공, 비주얼 콘텐츠 최적화 등의 작업이 포함된다.</p>
<p>RenderingNG는 다양한 주요 프로젝트들(CompositeAfterPaint, LayoutNG, 등)로 구성되어 있으며, 이들에 대해서는 이어지는 시리즈 글을 통해 자세한 내용을 공개할 예정이라고 한다.</p>
<blockquote>
<p>보다 자세한 아키텍처는 이어지는 다음 시리즈 글을 참고하라.<!-- raw HTML omitted -->
<a href="https://developer.chrome.com/blog/renderingng-architecture/">Overview of the RenderingNG architecture</a></p>
</blockquote>
<blockquote>
<p>RenderingNG에 대한 간략한 요약은 다음을 참고하라.<!-- raw HTML omitted -->
<a href="https://meetup.toast.com/posts/293">Chromium이 발표한 RenderingNG가 무엇인가?</a></p>
</blockquote>
<h2><a href="https://www.bram.us/2019/03/17/the-future-of-css-nesting-selectors/">The future of CSS: Nesting Selectors</a></h2>
<p>CSS 전처리기인 LESS/SASS 등을 사용해 본 경험이 있다면, 중첩 규칙을 통해 상위 선택자와 매칭할 수 있는 <code>&amp;</code> 규칙에 대해 잘 알고 있을 것이다.</p>
<p>이를 별도의 도구를 통해 변환 없이 네이티브에서 사용할 수 있게 하는 &quot;Nesting Selector&quot;(CSS Nesting Module) 스펙에 대한 제안으로, 기본적 문법과 사용 예시 등을 소개한다.</p>
<pre><code class="language-css">table.colortable {
  &amp; td {
    text-align: center;
    &amp;.c { text-transform: uppercase }
    &amp;:first-child, &amp;:first-child + td { border: 1px solid black }
  }
  &amp; th {
    text-align: center;
    background: black;
    color: white;
  }
}
</code></pre>
<p>CSSWG은 2021/7/7, 관련 제안에 대해 Public Working Draft 발행에 동의해 표준화를 향한 여정이 시작되었다.</p>
<blockquote>
<p>CSS 표준화 프로세스에 대해서는 다음을 참고하라.<!-- raw HTML omitted -->
<a href="https://fantasai.inkedblade.net/weblog/2011/inside-csswg/process">An Inside View of the CSS Working Group at W3C</a></p>
</blockquote>
<h2><a href="https://css-tricks.com/next-gen-css-container/">Next Gen CSS: @container</a></h2>
<p><a href="https://github.com/w3c/csswg-drafts/issues?q=is:issue+label:css-contain-3+">Containment Level 3 spec</a>의 일원인 <code>@container</code> 속성은 부모 컨테이너의 크기를 기준해 요소를 스타일링 할 수 있게 한다.</p>
<blockquote>
<p>사용을 위해선 최신 Chrome(v91+)에서 다음 플래그를 활성화해야 한다.<!-- raw HTML omitted -->
<code>chrome://flags/#enable-container-queries</code></p>
</blockquote>
<h2><a href="https://www.smashingmagazine.com/2021/07/dynamic-header-intersection-observer/">Building A Dynamic Header With Intersection Observer</a></h2>
<!-- raw HTML omitted -->
<p>뷰 영역에서 특정 요소가 스크롤 됨에 따라 동적으로 반응하는 UI를 구현하려고 할 때 Intersection Observer API를 활용할 수 있다.
이 글에서 제공하는 데모를 확인해 본다면 Intersection Observer를 더 쉽게 이해할 수 있을 것이다.</p>
<ul>
<li><a href="https://codepen.io/michellebarker/full/xxwLpRG">#Intersection Observer 시각화 도구</a></li>
<li><a href="https://codepen.io/michellebarker/pen/QWpzwYN">#동적 헤더 구현</a></li>
</ul>
<h2><a href="https://jsbooks.revolunet.com/">JS books</a></h2>
<p>무료로 다운로드하거나 읽을 수 있는 다양한 JavaScript 서적들에 대한 목록을 제공한다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://dev.to/gitpaulo/journey-of-a-web-page-how-browsers-work-10co">Journey of a web page 🛣️ - How browsers work</a></h2>
<!-- raw HTML omitted -->
<p>사용자가 브라우저에서 웹 주소를 입력하고, 그 결과로 출력되는 웹 페이지 사이에는 어떤 일들이 발생할까?</p>
<p>브라우저가 동작하는 방식에 대해선 많이 다뤄져 왔지만, 네트워크 레벨에서의 과정과 이후 브라우저에서의 처리 과정들을 순차적 흐름에 따라 내용을 이해할 수 있도록 설명하고 있어 보다 넓은 시각에서 웹을 이해할 수 있도록 도와주는 글이다.</p>
<h2><a href="https://dev.to/dstrekelj/how-to-write-unit-tests-in-javascript-with-jest-2e83">How to write unit tests in JavaScript with Jest</a></h2>
<p>단위 테스트는 매우 중요하지만, 또한 많은 경우 간과되는 영역이기도 하다. 좋은 품질을 갖는 코드에 대한 이점은 확실히 부정적인 면보다 크지만, 별도의 시간을 들여 단위 테스트를 작성하는 것은 항상 부담스러운 영역이기도 하다.</p>
<p>아직 단위 테스트 코드 작성에 익숙치 않다면, 이 튜토리얼을 통해 단위 테스트 작성을 시작해 보자.</p>
<h1>코드와 도구</h1>
<h2><a href="https://github.com/blueedgetechno/windows11">Windows 11 in React</a></h2>
<!-- raw HTML omitted -->
<p>웹 표준 기술(React)을 사용해, 웹에서 Windows 11 데스크톱 버전을 경험해 볼 수 있도록 복제한 프로젝트다.</p>
<p>https://win11.blueedge.me/</p>
<blockquote>
<p>Vanilla로 구현한 Windows 7 프로젝트도 참고해 보라.<!-- raw HTML omitted -->
https://desk.glitchy.website/</p>
</blockquote>
<h2><a href="https://github.com/nicoespeon/abracadabra">Abracadabra</a></h2>
<!-- raw HTML omitted -->
<p>VS Code에서 제공하는 <a href="https://code.visualstudio.com/docs/editor/refactoring">기본적 리팩토링</a>에 더해 리팩토링을 빠르고 안전하게 수행할 수 있는 추가적 기능을 제공하는 플러그인이다.</p>
<blockquote>
<p>리팩토링 자동화를 위해 제공되는 전체 기능 목록은 다음을 참고하라.<!-- raw HTML omitted -->
<a href="https://github.com/nicoespeon/abracadabra/blob/master/REFACTORINGS.md">List of available refactorings
</a></p>
</blockquote>
<h2><a href="https://slinky.dev/">slinky</a></h2>
<!-- raw HTML omitted -->
<p>Slinky는 Scala로 React 애플리케이션을 작성할 수 있는 프레임워크다.</p>
<h2><a href="https://github.com/solidjs/solid">solid</a></h2>
<!-- raw HTML omitted -->
<p>Solid는 사용자 인터페이스를 만들 수 있는 선언적이며, 유연한 라이브러리다.</p>
<p>VDOM을 사용하지 않고 템플릿을 통해 실제 DOM으로 컴파일하며, 상태에 종속된 코드만이 업데이트 되도록 래핑 된다.</p>
<pre><code class="language-js">// solid로 작성된 간단한 카운터 증가 예제 코드
import { render } from &quot;solid-js/web&quot;;
import { createSignal } from &quot;solid-js&quot;;

function Counter() {
  const [count, setCount] = createSignal(0);
  const increment = () =&gt; setCount(count() + 1);

  return (
    &lt;button type=&quot;button&quot; onClick={increment}&gt;
      {count()}
    &lt;/button&gt;
  );
}

render(() =&gt; &lt;Counter /&gt;, document.getElementById(&quot;app&quot;));
</code></pre>
<blockquote>
<p>직접 solid 애플리케이션을 작성하고 테스트 해볼 수 있다.<!-- raw HTML omitted -->
<a href="https://playground.solidjs.com/">Solid Playground</a></p>
</blockquote>
<blockquote>
<p>solid의 보다 자세한 내용은 다음 글을 참고하라.<!-- raw HTML omitted -->
<a href="https://dev.to/ryansolid/solidjs-official-release-the-long-road-to-1-0-4ldd">SolidJS Official Release: The long road to 1.0</a></p>
</blockquote>
</content></entry><entry><title>2020-06</title><id>https://github.com/naver/fe-news/blob/master/issues/2020-06.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2020-06.md" rel="alternate"/><content type="xhtml"><h1>2020-06 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://recoiljs.org/">Recoil: State Management library for React</a></h2>
<p>지난 5월 14일 온라인으로 열린 ReactEurope 콘퍼런스에서 페이스북은 새로운 상태 관리자 라이브러리인 Recoil을 공개했다.</p>
<!-- raw HTML omitted -->
<blockquote>
<p>발표영상: <a href="https://www.youtube.com/watch?v=_ISAA_Jt9kI">Recoil: State Management for Today's React</a></p>
</blockquote>
<p>Recoil은 기존 상태 관리자들만으로 해결하기 어려웠던 다음의 문제들을 해결하기 위해 개발되었다고 그 이유를 밝히고 있다.</p>
<ul>
<li>Flexible shared state</li>
<li>Derived data and queries</li>
<li>App-wide state observation</li>
</ul>
<blockquote>
<p>다음의 Egghead에서 제공되는 총 6분 내외의 짧은 온라인 튜토리얼을 통해 기본적인 Recoil의 사용방법을 빠르게 배울 수 있다.</p>
<ul>
<li><a href="https://egghead.io/playlists/up-and-running-with-recoil-a-new-state-management-library-for-react-78b8">Up and running with Recoil - a new state management library for React</a></li>
</ul>
</blockquote>
<h2><a href="https://www.smashingmagazine.com/2020/04/dark-mode-react-apps-styled-components/">Implementing Dark Mode In React Apps Using styled-components</a></h2>
<!-- raw HTML omitted -->
<p>많은 웹사이트가 다크 모드를 지원하는 추세다.
다크 모드는 사용자의 눈의 피로를 줄여줄 뿐만 아니라 사용자 디바이스의 전력 소모를 줄이는 데에도 도움을 줄 수 있다.
이 글에서는 CSS-in-JS 라이브러리 중 하나인 styled-components를 이용하여 간단하게 React 환경에서 Dark Mode를 구현하는 방법을 설명한다.</p>
<h2><a href="https://gyujincho.github.io/2018-06-19/AST-for-JS-devlopers">자바스크립트 개발자를 위한 AST(번역)</a></h2>
<!-- raw HTML omitted -->
<p>AST(Abstract Syntax Tree)가 무엇인지, 또, 자바스크립트 코드가 어떻게 AST로 변환이 되는지 설명하는 글이다.
AST가 어떻게 활용될 수 있는지 Babel, Prettier 등을 간단하게 예로 들어 보여준다.</p>
<h2><a href="https://mariosfakiolas.com/blog/become-a-better-godfather-for-your-react-components/">Become a better godfather for your React components</a></h2>
<!-- raw HTML omitted -->
<p>React Component를 디버깅하다 보면 한 번쯤은 React Developer Tools에서 Anonymous Component를 마주한 적이 있을 것이다. 이는 React 디버깅 시 작지 않은 방해 요소다. 이 글에서는 어떻게 하면 Anonymous Component를 피할 수 있는지 간단한 예시와 함께 설명한다.</p>
<h2><a href="https://genie-youn.github.io/journal/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C_AbortController%EB%A5%BC_%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC_%EB%B9%84%EB%8F%99%EA%B8%B0_%EC%9E%91%EC%97%85_%EC%A4%91%EB%8B%A8%ED%95%98%EA%B8%B0.html">자바스크립트에서 AbortController 를 활용하여 비동기 작업 중단하기</a></h2>
<!-- raw HTML omitted -->
<p>자바스크립트에서 비동기 작업을 도중에 중단하기란 보통 어려운 일이 아니다. 이 글에서는 브라우저의 AbortController API를 이용하여 자바스크립트 비동기 작업을 도중에 중단하는 방법에 대해 예제 코드와 함께 설명한다.</p>
<h2><a href="https://web.dev/lighthouse-whats-new-6.0/">What's New in Lighthouse 6.0</a></h2>
<!-- raw HTML omitted -->
<p>Chrome DevTools의 웹 사이트 진단 도구인 Lighthouse가 6.0 버전을 릴리스하였다. Chrome 84 버전부터 탑재 된다고 한다. 이 글에서는 6.0 버전에서 어떤 것들이 바뀌었는지 설명한다.</p>
<h2><a href="https://uxdesign.cc/text-fields-forms-design-ui-components-series-2b32b2beebd0">Text fields &amp; Forms design — UI components series</a></h2>
<!-- raw HTML omitted -->
<p>FE 개발자들이 빈번하게 개발하는 form. 우리는 그동안 익숙함에 늘 관성적으로 form을 개발하고 있지는 않았는가?</p>
<p>이 글에서는 form에서 각종 요소들이 어떻게 정렬되는지, 어떻게 위치하고 있는지 등에 따라 장단점을 알려준다. 또한 더 나은 사용자 경험을 위한 form을 만들기 위해 어떤 방법들이 있는지 좋은 사례와 나쁜 사례를 비교하며 자세하게 설명해 준다.</p>
<p>FE-news를 통해 지난 3월에 공유한 <a href="https://github.com/naver/fe-news/blob/master/issues/2020-03.md#design-better-forms">Design Better Forms</a>를 함께 읽어보면 사용자가 이용하기 편리한 form을 만드는데 큰 도움이 될 것이다.</p>
<h2><a href="https://web.dev/live/">web.dev - LIVE</a></h2>
<!-- raw HTML omitted -->
<p>구글 웹 플랫폼 팀에서 3일(6/30 ~ 7/2) 동안 온라인 이벤트를 진행할 예정이다.</p>
<p>빌드 도구부터 CSS, 이미지 압축, 크롬 개발자 도구를 활용한 문제점 발견과 해결 방법, PWA를 안드로이드 앱으로 배포하기 등등 웹 개발에 유익한 다양한 모던 웹 기술과 테크닉 세션들이 예정되어 있다.</p>
<h2><a href="https://keleshev.com/standard-io-under-the-hood">Standard IO Under the Hood</a></h2>
<p>우리가 <code>console.log()</code>를 사용할 때 실제로는 어떤 과정을 거쳐 호출이 실행될까?</p>
<p>C++로 작성된 JavaScript 런타임 V8의 코드를 통해 전체 실행 과정에 대한 설명을 확인할 수 있다. C++에 대한 경험이 없다면 이해하기 어려울 수도 있지만, 우리가 매일 작성하는 JavaScript 코드가 어떻게 실행되는가에 대한 호기심을 충족시켜 줄 수 있다.</p>
<h2><a href="https://stackoverflow.com/questions/34385243/why-is-immutability-so-important-or-needed-in-javascript/43318963#43318963">Why is immutability so important (or needed) in JavaScript?</a></h2>
<p>불변성(Immutability)은 JavaScript에서 필수적이라기보다는 패션 트렌드에 가깝고, React를 사용하는 경우 상태 관리에서 일부 <a href="https://github.com/facebook/react/issues/11527">혼란스러운 설계</a>에 대한 깔끔한 해결 방법을 제공할 수 있지만 대부분의 다른 상황에서는 도입에 따른 복잡성이 충분한 가치를 더해주지 못한다는 의견을 밝히고 있다.</p>
<h1>튜토리얼</h1>
<h2>A Visual Guide To React Mental Models</h2>
<blockquote>
<p><a href="https://obedparla.com/code/a-visual-guide-to-react-mental-models/">Part 1</a>, <a href="https://obedparla.com/code/a-visual-guide-to-react-mental-models-part-2-use-state-use-effect-and-lifecycles/">Part 2</a></p>
</blockquote>
<!-- raw HTML omitted -->
<p>React의 각 특징적 요소들과 동작 방식을 시각적 이미지로 설명한 ‘React Mental Model’ 가이드다.</p>
<blockquote>
<p>Mental Model 이란 우리가 ‘인터넷’을 머릿속으로 떠올렸을 때 그 거대한 네트워크가 어떻게 동작하는지 아주 세세히 알지 못하지만 대략적 동작 방식을 이해하고 관련된 문제를 해결, 개선할 수 있는 사고 과정이라 할 수 있다.</p>
</blockquote>
<p>가이드는 React의 기본적 개념과 동작 방식 등을 빠르고 쉽게 훑어볼 수 있도록 시각적 이미지를 활용해, React를 처음 접하는 이들과 전체 흐름을 이해하고자 하는 이들에게 큰 도움을 준다.</p>
<h2><a href="https://flaviocopes.com/deno/">Deno Handbook</a></h2>
<!-- raw HTML omitted -->
<p>지난 5월 14일 1.0 버전이 릴리스된 새로운 TypeScript 런타임 Deno에 대한 핸드북을 제공한다. 간결한 소개와 함께 Node.js와의 비교를 통한 차이점, 예제 코드를 통한 사용방법 등을 확인할 수 있다.</p>
<h2><a href="https://www.youtube.com/watch?v=f2mMOiCSj5c">Deconstructing React || Tejas Kumar</a></h2>
<p>React API들을 Vanilla JS를 이용해 간단하게 만들어 보며 이해하기 쉽게 설명한다. Virtual DOM(render), Hooks, Suspense에 대해 다룬다.</p>
<h1>코드와 도구</h1>
<h2><a href="https://manojvivek.github.io/responsively-app/">Responsively</a></h2>
<!-- raw HTML omitted -->
<p>반응형 사이트 개발 시, 다양한 크기의 디바이스에서 렌더링 되는 화면을 한 번에 보고 개발할 수 있도록 도와주는 도구로 Electron으로 개발되었다.</p>
<h2><a href="https://appy-dev.netlify.app/">Appy Dev</a></h2>
<!-- raw HTML omitted -->
<p>수년간의 큐레이션을 통해 수집된 다양한 웹 개발 도구, 유틸리티, 리소스 들의 링크 디렉터리를 제공하며, 리스트에서 확인할 수 있는 몇몇 도구들은 다음과 같다.</p>
<ul>
<li><a href="https://keyframes.app/">Keyframes</a>: CSS 애니메이션과 shadow 등의 개발을 도와주는 시각적 도구</li>
<li><a href="https://picular.co/">Picular</a>: 사용자 입력 키워드를 구글 이미지 검색으로 검색한 결괏값 이미지들에서 사용된 주요 색상 값들을 추출해 제공하는 도구</li>
<li><a href="https://htmlhead.dev/">HEAD</a>: HTML5 <code>&lt;head&gt;</code> 요소에 대한 사용 가이드</li>
</ul>
<h2><a href="https://github.com/nikersify/pico">pico</a></h2>
<!-- raw HTML omitted -->
<p>client side에서 스크린숏을 찍는 라이브러리이다. viewport에 맞춰 cross origin image, web fonts 등 headless browser를 이용해서는 얻을 수 없는 정보들을 포함하여 보다 정확하게 스크린숏 찍는 것을 목표로 한다고 한다.</p>
<h2><a href="https://github.com/framer/motion">motion</a></h2>
<!-- raw HTML omitted -->
<p>React에서 단지 props로 객체를 전달하는 것으로, animation과 gesture를 쉽게 사용할 수 있도록 도와주는 라이브러리이다.</p>
<h2><a href="https://github.com/bvaughn/react-error-boundary">react-error-boundary</a></h2>
<p>React 개발을 하다 보면 간혹 DOM과 sync가 안 맞는 등의 이유로 렌더링 중 에러를 뱉으며 흰 화면이 나타나는 경우를 겪을 수 있다.
이런 예외적인 상황을 대처하기 위해 React v16에서 ErrorBoundary API가 소개되었는데,
이 라이브러리를 이용하면 ErrorBoundary를 좀 더 쉽게 사용할 수 있다.</p>
</content></entry><entry><title>2021-03</title><id>https://github.com/naver/fe-news/blob/master/issues/2021-03.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2021-03.md" rel="alternate"/><content type="xhtml"><h1>2021-03 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://eyes.nasa.gov/apps/mars2020/">NASA: PRE-LANDING SIMULATION</a></h2>
<!-- raw HTML omitted -->
<p>얼마 전 미국 탐사 로봇이 화성에 착륙했고, NASA는 실시간 착륙 시뮬레이션을 웹에 공개했다.
WebGL 기술이 사용된 이 시뮬레이션에 대해 WebGL의 간판 라이브러리 three.js 개발자가 남긴 트윗이 인상적이다.</p>
<p>발전된 웹 기술이 이와 같은 다양한 영역에서 사용되는 것은 굉장히 고무적인 일이다.</p>
<p>(참고로 <a href="https://github.com/nasa?language=javascript">#이곳</a>에서 NASA가 JavaScript를 사용하고있는 오픈소스 프로젝트들을 확인해볼 수 있다.)</p>
<h2><a href="https://eytanmanor.medium.com/an-architectural-overview-for-web-rtc-a-protocol-for-implementing-video-conferencing-e2a914628d0e">An architectural overview for WebRTC — A protocol for implementing video conferencing</a></h2>
<!-- raw HTML omitted -->
<p>COVID-19 시대에서는 화상 회의 도구들은 이제 필수가 되었다. 웹에서 화상 회의 도구를 개발하기 위해선 WebRTC(Web Real-Time Communication)을 사용할 수 있다.</p>
<p>글의 저자는 단일 명령어 실행만으로 화상으로 코드 작성을 실시간으로 공유할 수 있는 CLI 도구인 <a href="https://github.com/DAB0mB/git-streamer">Git Streamer</a> 개발과정을 통해 학습된 화상회의 도구 개발의 기본적 개요/개념들을 설명한다.</p>
<h2><a href="https://arunmichaeldsouza.com/blog/web-platform&#x27;s-hidden-gems---shape-detection-api">Web platform's hidden gems - Shape Detection API</a></h2>
<p>오늘날 스마트폰은 다양한 영역과 일상생활에서 사용되고 있다. 대표적인 활용 영역들 중 하나는 결제를 위해 QR 코드나 바코드를 읽어내는 페이 등의 시스템이 그러하다.</p>
<p>웹에서 이러한 시스템을 구현하려면 어떻게 해야 할까? 많은 이들에게 잘 알려지지 않은 <a href="https://github.com/WICG/shape-detection-api">ShapeDetection API</a>은 웹에서 QR/바코드, 얼굴인식 그리고 문자인식(OCR)이 가능한 애플리케이션 개발을 가능하게 한다.</p>
<blockquote>
<p>[참고] <a href="https://web.dev/shape-detection/">The Shape Detection API: a picture is worth a thousand words, faces, and barcodes</a></p>
</blockquote>
<h2><a href="https://dev.to/karimelghamry/generators-in-javascript-how-to-use-them-372d">Generators in Javascript: How to use them</a></h2>
<!-- raw HTML omitted -->
<p>Generator는 일반 함수와 유사하나, 이전 실행이 종료된 지점의 상탯값을 저장하고 요청에 따라  종료된 시점부터 실행을 다시 지속할 수 있도록 만들 수 있는 함수다.</p>
<p>ES6 명세에 포함되어 있으며, 등장한지 많은 시간이 흘렀다. 그러나 실사용 사례는 아직까지 그에 비례하지 않는 것 같다. 이 글을 통해 다시 한번 기본적 이해와 함께 어떤 경우에 유용하게 사용하면 좋을지 확인해 보자.</p>
<blockquote>
<p>[참고] <a href="https://ko.javascript.info/generators">JAVASCRIPT.INFO: 제너레이터</a></p>
</blockquote>
<h2><a href="https://github.com/privatenumber/minification-benchmarks">JS minification benchmarks</a></h2>
<p>현재 JavaScript minifier 도구는 과거의 UglifyJS가 defacto 도구로 사용되었던 것과는 다르게 다양한 도구들이 개발되고 있다.</p>
<p>어떤 것이 가장 빠르게 실행될까? 유명한 프로젝트들의 빌드 파일을 대상으로 수행한 벤치마크 결과를 확인해 볼 수 있다.</p>
<h2><a href="https://www.smashingmagazine.com/2021/02/things-you-can-do-with-css-today/">Things You Can Do With CSS Today</a></h2>
<p>CSS는 최근 몇 년 동안 정말 빠르게 발전하고 있다. 그만큼 우리가 놓친 유용한 기능들도 많을 것이다.</p>
<p>이 글에서는 최신 CSS 기술들로 할 수 있는 Masonry layout, <code>:is</code> selector, CSS function, Aspect ratio 등의 활용적인 기능들에 대해 설명하고 있다.</p>
<h2><a href="https://dev.to/coderslang/series/11099">Test your JavaScript skills Series' Articles</a></h2>
<!-- raw HTML omitted -->
<p>JavaScript 인터뷰에 자주 등장하는, 헷갈리기 쉬운 문제를 16가지 예제와 함께 정리해 놓은 아티클이다. 차례차례로 읽어본다면 JavaScript에 대한 자신의 기본기를 부담 없이 확인해 보고 향상시킬 수 있을 것이다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://felixgerschau.com/javascript-memory-management/">JavaScript's Memory Management Explained</a></h2>
<p><img src="https://felixgerschau.com/static/b452488bd7eeac0405c48f164da6280d/29007/stack-heap-pointers.png" alt="" /></p>
<p>JavaScript 코드를 작성하면서 사용하게 되는 변수, 함수, 객체 등은 어디에 어떻게 저장되고 사용될까? 그리고 더 이상 필요 없게 되었을 때 어떻게 GC(Garbage Collection)가 이뤄지게 될까?</p>
<p>이 글은 JavaScript 메모리 관리에 대한 궁금증을 쉽게 해결해 줄 것이다.</p>
<h2><a href="https://js.plainenglish.io/lets-create-a-chrome-extension-to-add-new-features-to-medium-3da288af710e">Let’s Create a Chrome Extension To Add New Features To Medium</a></h2>
<!-- raw HTML omitted -->
<p>웹 서비스를 이용 중에 어떤 기능이 추가되면 좋겠다는 생각을 해본 경험이 있는가? Chrome 브라우저를 사용한다면 extension을 개발함으로써 이 문제를 해결할 수 있다.</p>
<p>이 글에서는 Chrome extension이 어떻게 동작하는지에 대한 간단한 설명과 실제로 Medium에서 사용할 수 있는 extension에 새로운 기능을 추가하는 예제를 보여주고 있다.</p>
<h1>코드와 도구</h1>
<h2><a href="https://github.com/walmartlabs/json-to-simple-graphql-schema">json-to-simple-graphql-schema</a></h2>
<blockquote>
<p>JSON에 동일한 필드를 갖는 2개의 타입이 존재하는 경우:</p>
</blockquote>
<pre><code class="language-json">{
  &quot;id&quot;: &quot;some-id-0&quot;,
  &quot;name&quot;: &quot;A fun object&quot;,
  &quot;color&quot;: {
    &quot;id&quot;: &quot;color-id-1&quot;,
    &quot;name&quot;: &quot;Test color&quot;
  },
  &quot;favoriteColor&quot;: {
    &quot;id&quot;: &quot;color-id-1&quot;,
    &quot;name&quot;: &quot;Test color&quot;
  }
}
</code></pre>
<blockquote>
<p>앱을 통해 실행되면, 다음의 스키마가 생성된다.</p>
</blockquote>
<pre><code class="language-graphql">
type FavoriteColor {
  id: String
  name: String
}

type Color {
  id: String
  name: String
}

type AutogeneratedMainType {
  id: String
  name: String
  favoriteColor: FavoriteColor
  color: Color
}

# Types with identical fields:
# FavoriteColor Color
It called out the two types with identical fields.

</code></pre>
<p>JSON 형태의 데이터를 graphql schema로 변환해 주는 도구이다.</p>
<p>JSON 기반으로 API 통신하는 프로젝트에 graphql을 적용하는 상황이라면 이 도구가 굉장히 유용하게 쓰일 것이다.</p>
<h2><a href="https://www.speedtyper.dev/">&lt;SpeedTyper /&gt;</a></h2>
<!-- raw HTML omitted -->
<p>개발자들을 위한 코드 타이핑 학습(게임) 도구로, 실제 오픈소스 프로젝트들의 코드들을 사용한다. 속도와 정확성을 기준으로 다른 이들과 경쟁하거나 코드 타이핑 스킬을 스스로 학습해 볼 수도 있다.</p>
<h2><a href="https://parallel.js.org/">Parallel.js</a></h2>
<p>Parallel.js는 Node.js와 브라우저 환경에서 간단하게 병렬 작업을 수행할 수 있게 만들어 주는 작은 용량(1.49KB - gzipped)의 라이브러리로, Node.js 환경에서는 child processes, 그리고 웹 환경에서는 웹 워커를 사용한다.</p>
<h2><a href="https://runjs.app/">RunJS</a></h2>
<!-- raw HTML omitted -->
<p>Javascript 코드를 작성하고 실행시킬 수 있는 데스크톱 애플리케이션이다.</p>
<p>기본적으로 typescript를 지원하고 npm 패키지들을 설치해서 사용할 수 있다.
프로토타이핑이나 테스트 등 간단한 작업에 사용하기 알맞아 보인다.</p>
<h2><a href="https://www.remotion.dev/">Remotion</a></h2>
<!-- raw HTML omitted -->
<p>Remotion은 리액트를 사용하여 비디오와 모션 그래픽을 제작할 수 있는 라이브러리다. CSS, Canvas, SVG, WebGL 같은 웹 기술을 사용해 비디오를 만들 수 있다.</p>
</content></entry><entry><title>2021-02</title><id>https://github.com/naver/fe-news/blob/master/issues/2021-02.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2021-02.md" rel="alternate"/><content type="xhtml"><h1>2021-02 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://medium.com/javascript-in-plain-english/javascript-frameworks-performance-comparison-2020-cd881ac21fce">JavaScript Frameworks, Performance Comparison 2020</a></h2>
<!-- raw HTML omitted -->
<p>총 20개의 다양한 프레임워크들에 대한 성능 비교를 수행하고 그 결과를 소개하는 글이다.
벤치마크는 크게 다음의 3가지 영역에 대한 실행을 통해 비교를 수행한다.</p>
<ul>
<li>DOM 성능</li>
<li>초기 시작 메트릭</li>
<li>메모리 사용량</li>
</ul>
<p>또한 각 항목들은 상대적 비교를 위해, 가장 최적화된 Vanilla로 구현체의 결괏값이 제공된다.</p>
<blockquote>
<p>최종 벤치마크 결과는 다음 링크를 통해 확인할 수 있다.
https://krausest.github.io/js-framework-benchmark/index.html</p>
</blockquote>
<h2><a href="https://alexkondov.com/tao-of-react/">Tao of React - Software Design, Architecture &amp; Best Practices</a></h2>
<p>소프트웨어의 아키텍처와 디자인은 생산성과 유연성을 제공해 개발자들이 효율적으로 코어를 재작성하는 일이 없도록 만드는 것이 가장 큰 목표라 할 수 있다.</p>
<p>글의 저자는 2016년부터 React를 사용한 개발 경험을 통해 애플리케이션 구조(아키텍처)와 디자인 측면에서의 모범사례를 제시한다.</p>
<pre><code class="language-js">// ex) 헬퍼 함수들에 대한 정리
// 👎 클로저를 유지할 필요가 없는 중첩 함수를 피하라.
function Component({ date }) {
  function parseDate(rawDate) {
    ...
  }

  return &lt;div&gt;Date is {parseDate(date)}&lt;/div&gt;
}

// 👍 헬퍼 함수들은 컴포넌트 앞에 배치하라.
function parseDate(date) {
  ...
}

function Component({ date }) {
  return &lt;div&gt;Date is {parseDate(date)}&lt;/div&gt;
}
</code></pre>
<h2><a href="https://alesgenova.github.io/concurrent-wasm-workers/">Running Rust in WebAssembly in a Pool of Concurrent Web Workers in JavaScript</a></h2>
<!-- raw HTML omitted -->
<p>레이 트레이싱을 사용하는 3D 장면을 구성하는 단일 프레임을 렌더링 하는 실험적 애플리케이션 구현을 통해, 일련의 무거운 작업들을 빠르게 실행할 수 있는지에 대한 POC(Proof Of Concept)이다.</p>
<p>wasm 모듈로 컴파일된 Rust 라이브러리는 웹 워커 풀을 통해 다수의 작업을 동시에 실행되도록 해 무거운 작업들을 빠르게 처리할 수 있음을 증명한다.</p>
<p>데모 애플리케이션은 다음 링크를 통해 직접 실행해 볼수 있다.</p>
<ul>
<li>https://alesgenova.github.io/ray-tracer-app/</li>
</ul>
<h2><a href="https://github.blog/2020-12-21-how-we-built-the-github-globe/">How we built the GitHub globe</a></h2>
<!-- raw HTML omitted -->
<p>총 5개 시리즈를 통해 <a href="https://github.com/home">GitHub의 새로운 홈페이지</a> 개발 과정을 소개한다. 첫 번째 시리즈에서는 메인 페이지에 추가된 지구본을 통해 전 세계에서 발생되는 PR을 시각화하기 위한 개발 과정을 다루고 있다.</p>
<h2><a href="https://blog.isquaredsoftware.com/2021/01/context-redux-differences/">Why React Context is Not a &quot;State Management&quot; Tool (and Why It Doesn't Replace Redux)</a></h2>
<p>&quot;Context vs Redux&quot;에 대한 주제는 React Context API가 릴리스된 이래, 항상 많은 이들의 열띤 토론을 이끌어 냈던 단골 주제 중 하나였으며, 이들 &quot;토론&quot;의 대부분은 2가지 도구가 갖는 목적과 사용 사례에 대한 혼란에서 비롯되었음을 글에서 지적한다.</p>
<p>글의 저자는 자신이 작성했던 답글들을 정리해 어떤 경우에 이들이 사용되어야 하고, 무엇이 다른지 그리고 어떤 경우에 사용되어야 하는지를 자세하게 소개한다.</p>
<h2><a href="https://browntreelabs.com/how-to-ace-your-next-javascript-interview/">How to ace your next Javascript interview</a></h2>
<!-- raw HTML omitted -->
<p>7분 내외의 짧은 동영상을 통해 저자는 지난 10여 년간의 경력에서 경험했던 수많은 인터뷰 참여를 통해 모든 인터뷰들에서 갖는 일반적인 패턴들이 존재하며, 이들 패턴들을 잘 이해하고 공부한다면 여러분들도 충분히 다음 인터뷰에서 성공할 수 있을 것이라 말한다.</p>
<p>대다수 인터뷰에서 관찰됐던 일반적인 패턴들은 다음과 같다.</p>
<ul>
<li>최소한 한 가지 이상의 까다로운 문제(tricky question)가 존재한다.</li>
<li>일반적으로 한 개 이상의 알고리즘 문제가 포함된다.</li>
<li>전체 애플리케이션 내에 포함되는 작은(일부) 기능 구현을 작성해 보도록 요구된다.</li>
<li>JavaScript의 경우, vanilla JS로 작성할 것이 요구된다.</li>
</ul>
<h2>2020 설문조사</h2>
<!-- raw HTML omitted -->
<p>또 다른 새해가 시작되었다. 지난 1년간 Front-end 영역에서의 변화가 무엇일지, 그리고 앞으로의 전망은 어떻게 될지 가장 빠르고 쉽게 알아볼 수 있는 방법은 바로 다양한 이들의 생각을 살펴보는 것이다.</p>
<p>매해 진행되는 다음의 다양한 설문조사 결과들은 여러분들의 궁금증에 대한 해답을 들려줄 것이다.</p>
<ul>
<li><a href="https://tsh.io/State-of-Frontend-2020-by-TSH.pdf">State of Frontend 2020</a></li>
<li><a href="https://2020.stateofjs.com/ko-KR/">2020 State Of JS</a></li>
<li><a href="https://2020.stateofcss.com/ko-KR/">2020 State Of CSS</a></li>
<li><a href="https://risingstars.js.org/2020/en#section-framework">2020 JavaScript Rising Stars</a></li>
<li><a href="https://designsystemssurvey.seesparkbox.com/2020/">2020 Design Systems Survey</a></li>
</ul>
<h2><a href="https://stackshare.io/posts/top-developer-tools-2020">The Top 100+ Developer Tools 2020</a></h2>
<!-- raw HTML omitted -->
<p>개발 회사와 개발팀에서 어떤 오픈소스와 도구들을 사용하고 있는지 공유하고 파악할 수 있는 <a href="https://stackshare.io/">stackshare</a> 사이트에서 작년(2020) 한 해 동안 커뮤니티에서 가장 높은 점수를 받은 기술들에 대해 순위를 메겼다.</p>
<p>이 순위는 커뮤니티에서 얻은 8백만 개 이상의 데이터를 분석해서 제공한 것이라고 한다.
언어, 프레임워크, 협업, 커뮤니케이션, 모니터링 등 각종 분야에서 어떤 기술들이 인기 있었는지 확인할 수 있고, 오픈소스와 기술 도구들의 트렌드와 흐름을 한눈에 파악하는 데 도움이 될 것이다.</p>
<h2>카카오 FE개발자의 성장 스토리</h2>
<p>카카오 FE 개발자들의 성장 스토리에 대한 시리즈 글로, 다양한 기술적 공유와 경험 등을 소개한다.</p>
<ul>
<li><a href="https://tech.kakao.com/2020/11/24/frontend-growth-01/">01: Judy, 첫 컨퍼런스에 가다(feat. JSConf korea 2020)</a></li>
<li><a href="https://tech.kakao.com/2020/12/01/frontend-growth-02/">02: Babel7과 corejs3 설정으로 전역 오염 없는 폴리필 사용하기</a></li>
<li><a href="https://tech.kakao.com/2020/12/03/frontend-growth-03/">03: 카카오 어드민 UI 컴포넌트를 모노레포로 개발하여 얻은 것들</a></li>
<li><a href="https://tech.kakao.com/2020/12/23/frontend-growth-04/">04: 공동체 FE 온라인 세션 후기</a></li>
<li><a href="https://tech.kakao.com/2021/01/12/frontend-growth-05/">05: 의존관계를 이용해 구조적 리팩토링 포인트 찾기</a></li>
<li><a href="https://tech.kakao.com/2021/02/02/frontend-growth-06/">06: 2021년 Chrome의 새로운 변화 – Schemeful same-site을 대응하자</a></li>
</ul>
<h2><a href="https://www.ridicorp.com/story/react-native-1year-review/">네이티브 앱 → 리액트 네이티브 앱 전환 그리고 1년 후</a></h2>
<p>Android와 iOS 각각 별도로 구현되었던 앱을 React Native로 통합한 과정과 그 후 1년간에 대한 회고를 다룬다.</p>
<h2><a href="https://github.com/kettanaito/naming-cheatsheet">Naming cheatsheet</a></h2>
<p>구체적인 가이드나 코드 컨벤션 없이 개발을 하다 보면 안 좋은 네이밍 방법으로 코드를 작성할 수 있다.</p>
<p>이 아티클은 꽤나 보편적으로 통용되는 네이밍 가이드를 예제와 함께 제시하고 있다.
자신이 작성한 코드에서 네이밍에 대한 의심이 있다면 한번 읽어보는 것을 추천한다.</p>
<pre><code class="language-js">/* Bad */
const a = 5 // &quot;a&quot; could mean anything
const isPaginatable = a &gt; 10 // &quot;Paginatable&quot; sounds extremely unnatural
const shouldPaginatize = a &gt; 10 // Made up verbs are so much fun!

/* Good */
const postCount = 5
const hasPagination = postCount &gt; 10
const shouldDisplayPagination = postCount &gt; 10 // alternatively
</code></pre>
<h2><a href="https://www.youtube.com/watch?v=IuXpqUxJG90">You Should Use React.memo More!</a></h2>
<!-- raw HTML omitted -->
<p>React에서 컴포넌트의 변경이 일어나면 렌더링이 발생하며, 해당 컴포넌트의 하위 컴포넌트도 변경 여부와 상관없이 렌더링이 다시 된다.</p>
<p>이를 방지하기 위한 방법은 <code>React.memo</code>를 사용하는 것이다.</p>
<p>이 영상에서는 memo가 어떻게 동작하는지 예시 프로젝트를 통해 보여주며 메모가 적용되지 않는 경우도 쉽게 설명해 준다.</p>
<p>규모가 큰 프로젝트에선 이런 사소한 것이 큰 성능 변화를 일으킬 수 있다. React 프로젝트를 진행하고 있다면 memo를 더 적극적으로 적용해 보는 것은 어떨까?</p>
<h2><a href="https://taegon.kim/archives/9919">[JS] 한글도 지원하는 퍼지 문자열 검색</a></h2>
<!-- raw HTML omitted -->
<p>종종 어떤 키워드를 검색하고 싶은데 해당 키워드 전체가 기억나지 않을 때가 있다. 그럴 때면 적당히 생각나는 초성 등만을 입력하여 검색을 하게 되는데, 이러한 대략적인 검색 방식을 퍼지 검색이라고 한다.</p>
<p>이 글은 한글 퍼지 검색에 대한 글이다. 하나씩 차근차근 설명하며 최종 구현 데모 페이지까지 제공한다.</p>
<h2><a href="https://ridicorp.com/story/how-to-use-redux-in-ridi/">리덕스 잘 쓰고 계시나요?</a></h2>
<!-- raw HTML omitted -->
<p>React 개발의 초창기에는 React 프로젝트에서 Redux를 사용하는 것이 당연시되어 왔다. 하지만, 이제는 리액트 자체적인 기능뿐 아니라 다른 라이브러리의 도움을 받아 훨씬 편하게 개발할 수 있는 방법이 존재한다.</p>
<p>이 글은 Redux뿐만 아니라 <a href="https://github.com/diegohaz/constate">Constate</a>, <a href="https://recoiljs.org/">Recoil</a>, <a href="https://jotai.surge.sh/">Jōtai</a> 등 다른 상태 관리 라이브러리 대체재들을 소개하고 있고 같은 구현체를 여러 상태 관리 라이브러리 코드로 작성하고 있어 간단히 비교하기 좋다. React 프로젝트에서 어떤 상태 관리 라이브러리를 도입할지 검토 중일 때 참고하기 좋은 글이다.</p>
<p>또한, Redux를 사용할 때 참고할만한 훌륭한 팁들을 많이 소개하고 있다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://dev.to/pandasekh/building-a-real-time-commenting-system-in-react-part-1-3-3kep">Building a Real-Time Commenting System in React</a></h2>
<!-- raw HTML omitted -->
<blockquote>
<ul>
<li><a href="https://dev.to/pandasekh/making-nested-comments-building-a-real-time-commenting-system-in-react-part-2-3-3044">Making Nested Comments - Part 2</a></li>
<li><a href="https://dev.to/pandasekh/emoji-reactions-for-comments-building-a-real-time-commenting-system-in-react-part-3-3-4m6">Emoji Reactions for Comments - Part 3</a></li>
</ul>
</blockquote>
<p>총 3개의 시리즈로 구성된 실시간 댓글 개발 과정을 소개하는 튜토리얼이다.</p>
<ul>
<li>소스코드: https://github.com/PandaSekh/React-Commenting-System</li>
<li>온라인 데모: https://react-commenting-system.vercel.app/</li>
</ul>
<p>튜토리얼을 통해 무제한 대댓글, 이모티콘, 마크다운 문법 지원, 페이지 새로 고침 없이 표현되는 실시간 업데이트 등의 기능이 지원되는 댓글 개발을 따라 해 볼 수 있다.</p>
<h2><a href="https://dev.to/atapas/the-definitive-guide-to-javascript-debugging-2021-edition-116n">The definitive guide to JavaScript Debugging [2021 Edition]</a></h2>
<!-- raw HTML omitted -->
<p>JavaScript 애플리케이션을 디버깅하기 위해 알아야 하는 개발자 도구의 사용법과 의미를 간략하게 소개하는 종합적 디버깅 가이드다.</p>
<p>크롬 개발자 도구를 기반으로 하고 있지만, 타 브라우저들의 개발자 도구들도 모두 유사한 기능을 제공하고 있으므로 학습 내용을 활용하는 것은 전혀 문제 되지 않을 것이다.</p>
<h1>코드와 도구</h1>
<h2><a href="https://forgojs.org/">Forgo</a></h2>
<!-- raw HTML omitted -->
<p>4KB 크기의 라이브러리로, JSX(React의 것과 유사한)를 사용한다. 이미 여러분이 알고 있는 DOM API와 플레인 JS를 사용해 모던 웹앱 개발을 할 수 있게 하기 때문에 별도의 러닝 커브 없이 빠르게 개발을 시작할 수 있다.</p>
<h2><a href="https://moiva.io/">Moiva</a></h2>
<!-- raw HTML omitted -->
<p>npm 패키지의 다운로드 수, 릴리스 횟수 등 패키지에 대한 전반적 상태에 대한 지표를 확인해 볼 수 있다. 이들 지표를 기준으로 다른 패키지와의 비교를 통해 패키지 선택시 도움을 받을 수 있다.</p>
<blockquote>
<p>[참고] 유사한 도구로는 다음을 함께 참고하라.</p>
<ul>
<li><a href="https://www.npmtrends.com/">npm trends</a></li>
<li><a href="https://bundlephobia.com/">Bundle Phobia</a></li>
</ul>
</blockquote>
<h2><a href="https://aka.ms/codeswing">CodeSwing</a></h2>
<!-- raw HTML omitted -->
<p>코드 수정을 실시간으로 반영해 미리 보기 할 수 있는 <a href="https://codepen.io/">CodePen</a>, <a href="https://jsfiddle.net/">JSFiddle</a>과 같은 playground 도구와 같이 VS Code 내에서 상호 동작하는 코딩 환경을 만들어 주는 플러그인이다.</p>
<h2><a href="https://handsfree.js.org/">Handsfree</a></h2>
<!-- raw HTML omitted -->
<p>별도의 입력장치를 사용하지 않는 핸즈프리 한 사용자 경험을 구성할 수 있게 도와주는 도구다.</p>
<p>사용자의 웹캠을 통해 사용자의 움직임(얼굴, 손, 몸짓 등)을 인식하며, 특정 제스처를 인식해 페이지 스크롤, 게임 조작 등을 할 수 있다.</p>
<blockquote>
<p>보다 자세한 내용은 다음의 소개 글을 같이 참고하라.</p>
<ul>
<li><a href="https://dev.to/midiblocks/introducing-handsfree-js-integrate-hand-face-and-pose-gestures-to-your-frontend-4g3p">Introducing Handsfree.js - Integrate hand, face, and pose gestures to your frontend</a></li>
</ul>
</blockquote>
<pre><code class="language-html">&lt;!-- CDN에서 관련 파일을 로딩 --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/handsfree@8.2.2/build/lib/assets/handsfree.css&quot; /&gt;
&lt;script src=&quot;https://unpkg.com/handsfree@8.2.2/build/lib/handsfree.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
    // 초기화
    const handsfree = new Handsfree({hands: true})
    handsfree.enablePlugins('browser')
    handsfree.start()
&lt;/script&gt;
</code></pre>
<h2><a href="https://createapp.dev">Create App</a>: Frontend build config generator</h2>
<!-- raw HTML omitted -->
<p>webpack, Parcel, Snowpack의 환경 구성을 편리하게 해주는 도구다.</p>
<p>React, Svelte, Vue의 설정을 지원하며, 이외에도 UI, Test, Transpiler, Style, Image, Utilities, Linting의 설정도 가능하다. 모든 설정이 끝난 뒤에는 다운로드하거나, <code>How to create your project yourself</code> 가이드를 따라 하면 된다.</p>
</content></entry><entry><title>2020-08</title><id>https://github.com/naver/fe-news/blob/master/issues/2020-08.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2020-08.md" rel="alternate"/><content type="xhtml"><h1>2020-08  <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://developer.apple.com/videos/play/wwdc2020/10665/">Safari Web Extensions</a></h2>
<!-- raw HTML omitted -->
<p>지난 WWDC 행사에서 차기 OS인 Big Sur에서 Chrome, Firefox, Edge 등과 대부분 호환되는 확장 기능 API인 &quot;Safari Web Extensions&quot;에 대한 지원(<a href="https://webkit.org/blog/10875/release-notes-for-safari-technology-preview-109-with-safari-14-features/">Safari 14</a>)을 발표했다.</p>
<p>작성된 확장 기능은 Native 앱으로 패키징 된 후, 앱스토어를 통해 호스팅 될 수 있으며, 다른 브라우저들의 기존 확장 기능 앱들은 Xcode 12(<a href="https://developer.apple.com/documentation/safariservices/safari_web_extensions/converting_a_web_extension_for_safari">safari-web-extension-converter</a>)를 통해 Safari에서 실행 가능하도록 손쉽게 변화될 수 있다고 한다.</p>
<p>Mozilla는 이번 결정에 <a href="https://hacks.mozilla.org/2020/06/welcoming-safari-to-the-webextensions-community/">환영</a> 한다는 입장을 밝히기도 했다.</p>
<h2><a href="https://devhints.io/">devhints.io</a></h2>
<p>프레임워크뿐만 아니라, 도구, 언어 등에 대한 cheatsheet를 제공한다. 주요 사용법, 문법, 옵션 등을 빠르고 쉽게 확인하고 적용할 수 있어, 가끔 기억나지 않을 때 바로 참고할 수 있어 편리하다.</p>
<ul>
<li><a href="https://devhints.io/es6">ES6 cheatsheet</a></li>
<li><a href="https://devhints.io/react">React cheatsheet</a></li>
<li><a href="https://devhints.io/vue">Vue.js cheatsheet</a></li>
<li><a href="https://devhints.io/regexp">Regex cheatsheet</a></li>
<li><a href="https://devhints.io/mysql">MySQL cheatsheet</a></li>
</ul>
<blockquote>
<p>유사한 프로젝트인 <a href="https://1loc.dev/">1loc</a> (Favorite single line of code)도 같이 참고하면 좋다.</p>
</blockquote>
<h2><a href="https://dev.to/rxjs/observables-reactive-programming-and-regret-4jm6">Observables, Reactive Programming, and Regret</a></h2>
<p>RxJS 프로젝트를 리딩 하는 Ben Lesh의 글로, 많은 개발자들은 Observables vs Reactive Programming vs RxJS 들을 동일시하거나 잘못 이해하고 있는 내용들을 설명하고, RxJS에 대한 후회를 담은 글이다.</p>
<h2><a href="https://www.youtube.com/watch?v=dtddBM8s7xY">Algorithms in CSS</a></h2>
<!-- raw HTML omitted -->
<blockquote>
<p><a href="https://www.slideshare.net/laras126/algorithms-in-css-v310-css-day-2019">발표 슬라이드</a></p>
</blockquote>
<p>CSS는 프로그래밍 언어일까 아닐까?</p>
<p>이는 명령형(imperative) 언어를 주로 사용해 온 JavaScript 개발자에게 선언적(declarative) 언어인 CSS는 때론 깊은 좌절감을 안겨주기도 한다.</p>
<p>2019년 암스테르담에서 개최된 CSS Day 2019 콘퍼런스 세션에서는 CSS도 프로그래밍 언어의 일종이며, 왜 중요한가에 대해 언어적 측면에서의 접근을 통해 설명한다.</p>
<h2><a href="https://svelte.dev/blog/svelte-and-typescript">Svelte &lt;3 TypeScript</a></h2>
<p>Svelte 개발팀은 공식적인 TypeScript 지원 추가를 발표했다.</p>
<p>새로운 공식 <a href="https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode">Svelte for VS Code</a> 확장 기능을 통해 syntax highlighting, Svelte 컴포넌트를 위한 intellisense 등의 지원을 활용할 수 있게 되었다.</p>
<h2><a href="https://medium.com/javascript-in-plain-english/use-chrome-devtools-like-a-senior-frontend-developer-99a4740674">Use Chrome DevTools Like a Senior Frontend Developer</a></h2>
<!-- raw HTML omitted -->
<p>FE 개발자 필수템(?) 중 하나인 Chrome DevTools. 이 글에서는 Chrome DevTools의 잘 알려지지 않은 강력한 기능을 소개하고 있다.</p>
<p>글에서 소개하는 몇 가지 기능들을 익혀 놓는다면 본인의 개발력을 상승시키는 데 도움이 되지 않을까?</p>
<h2><a href="https://github.com/yeonjuan/dev-blog/blob/master/JavaScript/return-null-vs-undefined.md">return null vs undefined</a></h2>
<p>JavaScript에서 값이 존재하지 않는 경우, 함수 반환값으로 null 과 undefined 중 어떤 값을 사용하면 좋을지에 대한 고민이 녹아 있는 글이다.</p>
<h2><a href="https://d2.naver.com/helloworld/2177909">어서 와, SSR은 처음이지? - 개발 편</a></h2>
<p>Node.js 기반의 SSR 개발과 운영을 통해 겪은 경험기 총 3편 중 두 번째 글로, 17년간 잔존해 왔던 레거시 시스템 내에서 네이버 모바일 블로그 서비스를 어떻게 SSR로 전환했는지와 대한민국의 거의 모든 사람들이 사용하는 모바일 블로그 서비스의 트래픽에 대응하기 위해 SSR 구축을 어떻게 준비하고 개발했는지에 대한 이야기를 다룬다.</p>
<h2>https://beta.caniuse.com/</h2>
<p>웹 명세들의 브라우저 지원 여부를 검색할 수 있는 <code>Can I use...</code> 사이트의 베타 버전이 공개되었다.<!-- raw HTML omitted -->
베타 버전에서는 보다 개선된 접근성, 다크 모드 지원, 개선된 URL 접근 경로 등이 제공된다.</p>
<blockquote>
<p>보다 자세한 업데이트 설명은 다음을 참고하라.<!-- raw HTML omitted -->
<a href="https://caniuse.com/feed/162">Canise: Beta site updates</a></p>
</blockquote>
<h2><a href="https://medium.com/developers-tomorrow/google-javascript-technical-interview-7a20accd6ddf">Google JavaScript Technical Interview (Callbacks, Promises, Await/Async)</a></h2>
<p>구글에서 기술면접 문제로 출제하고 있는 JavaScript 문제들 중 callback, promise, await/async를 비교하며 설명한다.</p>
<h2><a href="https://medium.com/@matanbobi/react-defaultprops-is-dying-whos-the-contender-443c19d9e7f1">React defaultProps is dying, who’s the contender?</a></h2>
<!-- raw HTML omitted -->
<p>React에서 <code>props</code>에 기본 값을 할당하는 방법으로는 대표적으로 ES6에서 도입된 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Default_parameters">기본 매개 변수 문법</a>과, React에서 제공하는 <code>defaultProps</code>를 이용하는 방법이 있다.</p>
<p>이 글에서는 두 방법의 차이점과 장단점은 무엇이 있는지 설명한다.</p>
<h2><a href="https://d2.naver.com/helloworld/4268738">2020년과 이후 JavaScript의 동향 - JavaScript(ECMAScript)</a></h2>
<p>2016년부터 매해 공유되고 있는 JavaScript 및 Front-end 동향에 대한 시리즈로, 그 첫 번째 영역인 &quot;JavaScript(ECMAScript)&quot;에 대한 글이다.</p>
<blockquote>
<p>지난 JavaScript(ECMAScript) 동향 시리즈: <a href="http://d2.naver.com/helloworld/3618177">2016</a>, <a href="http://d2.naver.com/helloworld/2809766">2017</a>, <a href="http://d2.naver.com/helloworld/7495331">2018</a>, <a href="http://d2.naver.com/helloworld/4007447">2019</a></p>
</blockquote>
<p>이번 글에서는 새로운 전환점의 시작을 맞고 있는 JavaScript의 변화와 앞으로의 전망 그리고, ECMAScript 2020/2021 새로운 주요 명세들을 확인해 볼 수 있다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://web.dev/one-line-layouts/">Ten modern layouts in one line of CSS</a></h2>
<!-- raw HTML omitted -->
<p>FE News <a href="./2020-06.md">6월 소식</a>에서 공유했었던 <a href="https://web.dev/live/">web.dev LIVE</a> 세션들 중 하나로, 모던 CSS 레이아웃 명세들을 이용해 자주 사용되는 10여 개의 레이아웃을 빠르고 간단하게 만드는 방법을 코드 예제와 함께 소개한다. 실행 결과 또한 시각화해 보여주기 때문에 쉽게 이해할 수 있다.</p>
<h2><a href="https://webglfundamentals.org/">WebGL Fundamentals</a></h2>
<!-- raw HTML omitted -->
<p>WebGL이 실제로 무엇이고 어떻게 작동하는지 기초부터 2D, 3D, 조명, 텍스처 등 WebGL에서 알아야 하는 모든 요소들에 대한 기초적인 설명과 예제와 함께 제공된다.</p>
<blockquote>
<p><a href="https://webglfundamentals.org/webgl/lessons/ko/">한글 번역</a>도 제공되지만, 일부 영역에 대해서만 한정적으로 제공된다.</p>
</blockquote>
<h2><a href="https://dev.to/calvintwr/build-instagram-using-typescript-node-express-and-vue-part-1-57do">Build Instagram Using TypeScript, Node, Express and Vue</a></h2>
<p>총 5개의 시리즈로 구성된 이 튜토리얼은 Node.js, Express, TypeScript, Vue를 사용해 instagram과 유사한 기능을 갖는 웹앱을 만드는 방법을 단계별로 설명한다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://twitter.com/b0rk/status/1284528767151611904">inline vs block</a></h2>
<!-- raw HTML omitted -->
<p>짧은 코믹 컷을 통해 프로그래밍 관련 개념들을 소개하는 <a href="https://twitter.com/b0rk">Julia Evans</a>가 inline과 block 요소의 차이점을 설명한 그림으로, 간단하고 빠르고 쉽게 개념을 이해할 수 있다.</p>
<p>트위터 계정에서는 웹 이외에도 다양한 기술적 영역들에 대한 코믹들을 확인할 수 있다.</p>
<h1>코드와 도구</h1>
<h2><a href="https://playwright.dev/">Playwright</a></h2>
<p>Playwright은 MS에서 개발한 Node 라이브러리로, Chromium, Firefox 그리고 WebKit 등의 브라우저를 자동화할 수 있는 크로스 브라우저 단일 API를 제공한다.</p>
<p>다음은 Chromium, Firefox 그리고 WebKit으로 http://whatsmyuseragent.org/ 를 방문하고, 3개의 스크린숏을 저장하는 예제 코드다.</p>
<pre><code class="language-js">const playwright = require('playwright');

(async () =&gt; {
  for (const browserType of ['chromium', 'firefox', 'webkit']) {
    const browser = await playwright[browserType].launch();
    const context = await browser.newContext();
    const page = await context.newPage();

    await page.goto('http://whatsmyuseragent.org/');
    await page.screenshot({ path: `example-${browserType}.png` });
    await browser.close();
  }
})();
</code></pre>
<h2><a href="https://github.com/checkly/puppeteer-recorder">Puppeteer Recorder</a></h2>
<p>Chrome 확장 기능으로, 브라우저에서 수행한 인터렉션을 기록하고 이를 Puppeteer 스크립트 코드로 만들어 준다.</p>
<blockquote>
<p><a href="https://chrome.google.com/webstore/detail/puppeteer-recorder/djeegiggegleadkkbgopoonhjimgehda">chrome 웹 스토어에서 설치하기</a></p>
</blockquote>
<!-- raw HTML omitted -->
<h2><a href="https://dev.to/gajus/my-favorite-css-hack-32g3">My favorite CSS hack</a></h2>
<p>아래의 괴상한 CSS 스니펫은 무슨 일을 할까?</p>
<pre><code class="language-css">* { background-color: rgba(255,0,0,.2); }
* * { background-color: rgba(0,255,0,.2); }
* * * { background-color: rgba(0,0,255,.2); }
* * * * { background-color: rgba(255,0,255,.2); }
* * * * * { background-color: rgba(0,255,255,.2); }
* * * * * * { background-color: rgba(255,255,0,.2); }
* * * * * * * { background-color: rgba(255,0,0,.2); }
* * * * * * * * { background-color: rgba(0,255,0,.2); }
* * * * * * * * * { background-color: rgba(0,0,255,.2); }
</code></pre>
<p>위의 스니펫은 아래의 우측 이미지와 같이 요소들을 구분해 볼 수 있도록 해 페이지 레이아웃 작업 시 유용하게 사용될 수 있다.</p>
<blockquote>
<p>본문 글에 달린 댓글에서는 몇몇 사용자들이 개선한 버전들도 함께 찾아볼 수 있다.</p>
</blockquote>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2><a href="https://tsdx.io/">TSDX</a></h2>
<!-- raw HTML omitted -->
<p>최근의 TypeScript 인기에 따라 많은 프로젝트들이 TypeScript로 개발되고 있다. 하지만, TS 프로젝트를 설정하는 일은 때로는 도전적인 일이 되기도 한다. 다양한 개발 환경에 따라 그에 맞는 TS 관련 도구들을 설치하고 설정하는 것은 골치 아프면서 귀찮은 일이다.</p>
<p>TSDX는 무설정(Zero-Config)을 표방하는 CLI 도구로, 간단하고 빠르게 새로운 TS 프로젝트를 부트스트랩 해 주는 도구다.</p>
<pre><code class="language-sh">npx tsdx create 프로젝트명
</code></pre>
<p>총 3가지 형태의 프로젝트 템플릿을 제공한다.</p>
<ul>
<li>basic: Plain TypeScript 프로젝트</li>
<li>react: React를 사용하는 프로젝트</li>
<li>react-with-storybook: React + React Storybook 설정</li>
</ul>
<h2><a href="https://npmview.now.sh/">npmview</a></h2>
<!-- raw HTML omitted -->
<p>npm 패키지 내의 파일들을 미리 보기 할 수 있는 도구로, 패키지 내의 파일 구성과 해당 파일의 내용까지 미리 보기 할 수 있다.
사용방법은 아래와 같이 npm에 배포된 패키지명을 덧붙이면 바로 확인이 가능하다.</p>
<pre><code>https://npmview.now.sh/패키지명
https://npmview.now.sh/패키지명@버전
</code></pre>
<h2><a href="https://screensizemap.com/">Screen size map</a></h2>
<p>다양한 디바이스들에서 사용하고 있는 스크린 크기를 비교해 볼 수 있다.</p>
<h2><a href="https://designer.mocky.io/">Mocky</a></h2>
<!-- raw HTML omitted -->
<p>원하는 형태(status code, content-type 등의 설정이 가능)로 응답을 받을 수 있는 목업 API를 만들고 테스트할 수 있다.</p>
<p>별도의 로그인 없이 사용 가능하며, JSONP, CORS 등도 지원하고 있어 아직 실 API의 개발이 완료되지 않은 상황에서 개발 작업을 진행할 수 있도록 도와준다.</p>
</content></entry><entry><title>2020-03</title><id>https://github.com/naver/fe-news/blob/master/issues/2020-03.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2020-03.md" rel="alternate"/><content type="xhtml"><h1>2020-03 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://github.com/request/request#deprecated">Request - Simplified HTTP client: Deprecated!</a></h2>
<p>24K 깃헙 Star와 매주 18M 건의 다운로드, 그리고 무려 48K 개의 패키지들이 의존하고 있는 인기 HTTP 클라이언트 라이브러리인 'Request'가 지난 2월 20일을 기점으로 deprecate 되었다.</p>
<blockquote>
<p>지난 10여 년간(2009년 시작) 유지되었던 이 프로젝트의 개발자인 Mikeal Rogers는 지난 몇 년간 빠르게 변화한 JavaScript 생태계의 변화들로 인해 request의 코어 패턴은 시대에 뒤떨어지게 되었고, 생태계를 위한 최선책은 메인터넌스 모드로 전환하는 것이라고 그 이유를 밝혔다. 보다 자세한 내용은 아래 링크를 통해 확인할 수 있다.</p>
<ul>
<li><a href="https://github.com/request/request/issues/3142">Request’s Past, Present and Future</a></li>
</ul>
</blockquote>
<h2>(영상) <a href="https://www.youtube.com/watch?v=bwA9i6wjfhw">dotJS 2019 - Vladimir Agafonkin - Fast by default: algorithmic performance optimization in practice</a></h2>
<blockquote>
<p>병목지점을 찾고 왜 느린지 생각하고 빠르게 만들어라!</p>
</blockquote>
<p>Javascript에서 퍼포먼스를 향상시키는 방법을 다양한 경험과 예제를 통해 설명한다.</p>
<h2><a href="https://medium.com/naver-fe-platform/some-tips-for-the-web-vr-beginners-ee12002f36bf">Some Tips for the Web VR Beginners</a></h2>
<blockquote>
<p>단돈 5 달러만 있어도 VR 콘텐츠를 즐길 수 있는 세상, Web VR 개발 팁을 공유한다.</p>
</blockquote>
<p>Web VR을 개발하려고 할 때 어떤 것들을 고민해봐야 하는지 여러 가지 브라우저와 기기의 측면에서 이야기한다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://overreacted.io/goodbye-clean-code/">Good bye, Clean Code</a></h2>
<blockquote>
<p>클린코드 빌런이 되지는 말자. 클린 코드는 목표가 아니고 단지 프로그램의 복잡성을 줄이고자 하는 시도일 뿐이며, 코드가 어떻게 바뀔지 모르는 상황에서, 피해를 최소한으로 줄이고자 하는 방어 전략 중 하나일 뿐이다.</p>
</blockquote>
<p>코드가 어떻게 보이는지만 보는 게 아니라 다양한 사람들로부터 어떻게 발전시켜 나갈지가 중요하다는 것을 경험을 토대로 이야기한다.</p>
<h2><a href="https://css-tricks.com/a-guide-to-console-commands/">A Guide to Console Commands | CSS-Tricks</a></h2>
<blockquote>
<p>console은 간단히 다루기에는 알아야할 것들이 의외로 많다.</p>
</blockquote>
<p>우리가 코드를 처음 시작할 때 다뤘던 console의 다양한 활용법, 기능을 자세히 가이드한다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://softwareontheroad.com/ideal-nodejs-project-structure/">Bulletproof node.js project architecture 🛡️</a></h2>
<blockquote>
<p>Express.js는 node.js로 REST API를 개발할 때 정말 좋은 프레임워크이지만, node.js 프로젝트를 어떻게 구성해야 하는지에 대해 그 누구도 알려주지 않는 건 큰 문제다.</p>
</blockquote>
<p>Express.js 기반의 node 프로젝트를 어떻게 설계/구성해야 하는지 자세하게 설명한다. 한글로 번역된 글(<a href="https://velog.io/@hopsprings2/%EA%B2%AC%EA%B3%A0%ED%95%9C-node.js-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0">#바로가기</a>)도 있다.</p>
<h2><a href="https://uxdesign.cc/the-ultimate-guide-to-proper-use-of-animation-in-ux-10bd98614fa9">The ultimate guide to proper use of animation in UX</a></h2>
<p>사용자 경험(UX)을 위해 애니메이션을 사용하는 경우 고려해야 하는 종합적인 가이드를 제공한다. Timing Function에 따라 적합한 애니메이션들은 무엇인지, 인터페이스 애니메이션의 가장 최적화된 속도는 200~500ms 사이(다수의 <a href="https://valhead.com/2016/05/05/how-fast-should-your-ui-animations-be/">리포트</a>에 근거한)라는 내용들을 소개하며, 각 항목 별로 제공되는 애니메이션 예제를 통해 차이점들을 직접 체감해 볼 수 있다.</p>
<blockquote>
<p>ex) 속도와 관련해서는 너무 빠르지는 않지만 사용자들의 기다림을 최소화한 속도의 애니메이션 적용의 필요성에 대한 애니메이션 예제
<img src="https://miro.medium.com/max/3840/1*SYWUDqw9jPF4Q--MWqisVg.gif" alt="" /></p>
</blockquote>
<h2><a href="https://uxdesign.cc/design-better-forms-96fadca0f49c">Design Better Forms</a></h2>
<blockquote>
<p>인생은 짧고 사용자는 폼에 데이터를 넣기 꺼려 한다.</p>
</blockquote>
<p>사용자에게 어떻게 폼을 제공해야 효과적이고 완료율이 높은지 설명하는 글. 현재 프로젝트에서 폼을 개발하고 있다면 필독!</p>
<!-- raw HTML omitted -->
<h2><a href="https://uxdesign.cc/7-design-psychologies-every-designer-should-know-d01a1becd961">7 design psychology fundamentals every designer should know</a></h2>
<blockquote>
<p>프로덕트를 개발할 때 멘탈모델을 염두해 두면 사용자의 반응을 성공적으로 이끌어 낼 수 있다.</p>
</blockquote>
<p>인간의 7가지 심리적요소를 UX에 어떻게 녹여야 사용자의 좋은 반응이 나오는지 설명해 준다.</p>
<h2><a href="https://onezero.medium.com/why-apples-notification-bubbles-are-so-stressful-65a544e51f10">Why Apple's Notification Bubbles Are so Stressful</a></h2>
<blockquote>
<p>iPhone의 잠금을 해제할 때마다 시뻘건 알림 벳지로 부터 공격을 받는다.</p>
</blockquote>
<p>나은 UX는 작은 변화로부터 시작된다. 필자가 &quot;인지 과부화&quot;라고까지 일컫는 알림 벳지 스트레스를 어떤 작은 변화로 해결할 수 있는지 이야기한다.</p>
<h2><a href="https://brunch.co.kr/@sijin90/50">네이버 지도 vs 카카오맵 사용자 경험 비교 (Mobile)</a> / <a href="https://brunch.co.kr/@sijin90/49">(PC)</a></h2>
<p>네이버 지도와 카카오맵을 Mobile과 PC 두 플랫폼에서 음성검색, 복사, 즐겨찾기 등 다양한 측면에서 비교한 글.
두 지도 서비스를 모두 설치하고 상황에 따라 적절히 이용하고 있는 필자의 UX에 대한 깊은 인사이트를 엿볼 수 있다.</p>
<h1>코드와 도구</h1>
<h2><a href="https://stackshare.io/posts/top-developer-tools-2019">The Top ~~50~~ 100+ Developer Tools 2019</a></h2>
<p>2019년 한 해동안 StackShare 커뮤니티에서 공유된 4백만 개 이상의 데이터를 분석했고, 프런트/백엔드부터 디자인 툴 그리고 협업 툴까지 18가지의 범주로 분류해서 순위화했다.</p>
<p>다양한 측면에서 비교를 통해 의미 있는 선택을 할 수 있게 도와주는 참고 자료가 될 것이다.</p>
<p>stackshare에서는 UBER, Airbnb, Shopify 등 기업들이 사용하는 기술 스택을 확인할 수 있다. <a href="https://stackshare.io/stacks">링크</a>에서 내가 사용하는 기술 스택과 다른 기업들이 사용하는 기술 스택을 비교하는 것도 쏠쏠한 재미가 되지 않을까?</p>
<!-- raw HTML omitted -->
<h2><a href="https://www.30secondsofcode.org/">30 seconds of code</a></h2>
<p>2018년 깃헙 Top 프로젝트로 선정되기도 했던 이 프로젝트는 코드 작성 시 맞닥뜨릴 수 있는 문제들의 해결을 위한 다양하고 짤막한 코드 스니펫 모음들을 제공한다. JavaScript 외에도 CSS, React, Python 등 총 7가지 개발 환경 및 언어들의 분류로 제공된다.</p>
<pre><code class="language-js">// ex) 배열 내에 존재하는 교차 값을 구하는 스니펫
const intersectionBy = (a, b, fn) =&gt; {
  const s = new Set(b.map(fn));
  return [...new Set(a)].filter(x =&gt; s.has(fn(x)));
};

intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor); // [2.1]
</code></pre>
<blockquote>
<p>추가로 <a href="https://github.blog/2018-12-13-new-open-source-projects/#top-projects-of-2018">2018년 Top 깃헙 프로젝트</a>로 선정되었던 다음 프로젝트도 유용하게 참고할만하다.</p>
<ul>
<li><a href="https://github.com/leonardomso/33-js-concepts">33-js-concepts</a>
JavaScript 개발자들이 알아두면 좋을 주요한 33가지 개념들에 대한 설명글과 동영상들의 방대한 목록을 제공한다.  이들 개념들 중에는 Call Stack, Expression(표현식) vs Statement(문장)의 차이 등을 살펴볼 수 있다.</li>
</ul>
</blockquote>
<h2><a href="https://addons.mozilla.org/en-US/firefox/addon/google-lighthouse/">Google Lighthouse: Firefox Add-ons</a></h2>
<p>Chrome 브라우저의 기본 성능 측정 도구인 Lighthouse를 이제 Firefox에서도 사용할 수 있다.</p>
<h2><a href="https://github.com/fullcalendar/fullcalendar">fullcalendar/fullcalendar</a></h2>
<p>이벤트 drag &amp; drop이 가능한 full-sized 달력이다.</p>
<h2><a href="https://github.com/myliang/x-spreadsheet">myliang/x-spreadsheet</a></h2>
<p>웹 엑셀. 엑셀 function 도 사용 가능하다.</p>
</content></entry><entry><title>2020-09</title><id>https://github.com/naver/fe-news/blob/master/issues/2020-09.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2020-09.md" rel="alternate"/><content type="xhtml"><h1>2020-09</h1>
<!-- raw HTML omitted -->
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://wormwlrm.github.io/2020/08/12/History-of-JavaScript-Modules-and-Bundlers.html">JavaScript 번들러로 본 조선시대 붕당의 이해</a></h2>
<!-- raw HTML omitted -->
<p>Javascript의 모듈시스템과 번들러는 종류도 많고 방식도 달라서 처음 진입하는데 어려움이 있다.</p>
<p>이 글에서는 여려운 내용을 쉽게 전달하기 위해 &quot;조선시대 붕당의 이해&quot;라는 짤에 유머러스하게 비유해 제시하고, 시간의 흐름에 따라 설명하고 있다.</p>
<p>복잡하고 어려운 Javascript의 모듈시스템과 번들러의 이해를 도와줄 글이다.</p>
<h2><a href="https://v8.dev/blog/cost-of-javascript-2019#json">The cost of parsing JSON</a></h2>
<p>아래의 JS 객체 리터럴과 <code>JSON.parse()</code>를 통한 문자열 파싱 방식들 중, 어떤 것이 성능적으로 더 빠를까?</p>
<pre><code class="language-js">const data = { foo: 42, bar: 1337 };
const data = JSON.parse('{&quot;foo&quot;:42,&quot;bar&quot;:1337}');
</code></pre>
<p><code>JSON.parse()</code>는 파싱, 컴파일 그리고 실행 모든 단계에 있어, 대다수의 JS 엔진에서 객체 리터럴 대비 약 1.7배 이상 더 빠르게 처리된다.</p>
<blockquote>
<p>JSON의 빠른 파싱을 위해 SIMD(Single Instruction Multiple Data)를 사용해 GB 단위의 데이터를 초당 처리할 수 있는 <a href="https://github.com/simdjson/simdjson">simdjson</a> 프로젝트도 흥미로워 보이며, 다양한 바인딩(Node.js 바인딩은 <a href="https://github.com/luizperes/simdjson_nodejs">simdjson_nodejs</a>)과 포트들이 제공된다.</p>
<p>암호화폐 호가 JSON 데이터를 simdjson보다 더 빠르게 파싱하는 C++ 코드를 작성한 경험을 다룬 &quot;<a href="https://tanstaafl.dev/20200821-worlds-fastest-json-parser.html">세계에서 제일 빠른 JSON 파서 만들기</a>&quot; 글도 재밌게 읽어볼 수 있다.</p>
</blockquote>
<!-- raw HTML omitted -->
<blockquote>
<p>다음의 벤치마크와 적용 사례 등도 같이 참고해 보기 바란다.</p>
<ul>
<li><a href="https://github.com/GoogleChromeLabs/json-parse-benchmark">JSON.parse benchmark</a></li>
<li><a href="https://joreteg.com/blog/improving-redux-state-transfer-performance">Improving Redux state transfer performance with JSON.parse(), a quick case study</a></li>
</ul>
</blockquote>
<h2><a href="https://medium.com/better-programming/whats-new-in-typescript-4-fe8d50f08e31">What’s New in TypeScript 4</a></h2>
<!-- raw HTML omitted -->
<p>typescript 4.0 버전이 발표되었다.</p>
<p>이번 버전에서는 튜플 타입에 라벨링을 할 수 있고 스프레드 오퍼레이터를 제네렉 타입에도 쓸 수 있게되었다. 자세한 내용은 글에서 확인할 수 있다.</p>
<p>또한 <a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-0/">공식블로그</a>에서는 보다 더 상세한 내용을 참고할 수 있다.</p>
<h2><a href="https://reactjs.org/blog/2020/08/10/react-v17-rc.html">React v17.0 Release Candidate: No New Features</a></h2>
<p>React major 버전이 곧 올라간다. 곧바로 추가되는 새로운 기능은 없고, 사용자들이 큰 무리없이 업그레이드를 가능하게끔 하는 것을 중점으로 두었다. 이 외에 document에서 root노드로 이벤트 위임변경 등 여러가지 개선한 내용을 담고 있다.</p>
<h2><a href="https://dmitripavlutin.com/what-is-string-in-javascript/">What Actually is a String in JavaScript?</a></h2>
<!-- raw HTML omitted -->
<p>다음 출력값은 무엇일까?</p>
<pre><code class="language-js">console.log(&quot;🥶&quot;.length);
console.log([...&quot;🥶&quot;].length);
</code></pre>
<p>한 이모지이므로 차례로 <code>1</code>, <code>1</code>이라고 생각할 수 있겠지만 결과는 <code>2</code>, <code>1</code>이다.
왜 그럴까? 이 글에서는 Javascript가 문자열을 다루는 방식을 설명하고, 어떻게 위와 같은 결과가 도출되는지 간략하게 설명한다.</p>
<h2><a href="https://www.youtube.com/watch?v=S1wQ0WvJK64">Why I Don’t Use GraphQL Anymore</a></h2>
<p>MongoDB 엔지어인 <a href="https://hswolff.com/">Harry Wolff</a>가 밝히는 왜 GraphQL을 더 이상 사용하지 않는지에 대한 동영상이다.</p>
<!-- raw HTML omitted -->
<p>GraphQL은 매력적이고 FE 개발에 놀라운 기능들을 제공하지만 그에 반해 서버 구현은 매우 어렵다.</p>
<p>또한 Facebook과 같은 스케일의 서비스에서는 많은 문제들을 해결해 줄 수 있지만, 대다수의 사용자들은 그러한 환경에서 사용하지는 않기 때문이라고 그 이유를 설명한다.</p>
<h2><a href="https://medium.com/better-programming/10-awesome-chrome-flags-you-should-enable-right-now-2684e4518cb5">10 Awesome Chrome Flags You Should Enable Right Now</a></h2>
<!-- raw HTML omitted -->
<p>바로 사용해도 좋은 10가지 크롬 플래그를 소개한다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://sunilsandhu.com/posts/i-created-the-exact-same-app-in-react-and-vue-2020-edition">I created the exact same app in React and Vue. Here are the differences</a></h2>
<!-- raw HTML omitted -->
<p>React와 Vue를 이용해서 똑같은 TODO 앱을 만들어 보면서 어떤 점이 다른지, 코드 스타일은 어떤 식으로 차이가 있는지를 설명하고 있다. 2020년 버전으로 React는 Hooks를 Vue(3+)는 Composition API를 사용했다. (2019년, 2018년 버전도 본문 하단 링크에 있다.)</p>
<p>소스를 올려놓은 저장소 링크도 있으니 코드를 확인하거나 직접 실행해볼 수 있다.</p>
<p>두 개의 선택지에서 갈등하는 개발자가 읽어보기를 추천한다.</p>
<h2><a href="https://typescript-exercises.github.io/">TypeScript Exercises</a></h2>
<p>인터랙티브한 구성을 통해 제공되는 16개의 연습문제를 해결을 통해 아래의 TS 기능들을 학습해 볼 수 있다.</p>
<ul>
<li>Basic typing.</li>
<li>Refining types.</li>
<li>Union types.</li>
<li>Merged types.</li>
<li>Generics.</li>
<li>Type declarations.</li>
<li>Module augmentation.</li>
<li>Advanced type mapping.</li>
</ul>
<h2><a href="https://youtu.be/U64vIhh0TyM">Let's build BATTLESHIPS in JavaScript, HTML and CSS</a></h2>
<!-- raw HTML omitted -->
<p>배틀쉽 게임을 제작하는 과정을 소개한 유튜브 동영상 강의이다.</p>
<p>1시간 40분간의 강의를 따라서 간단한 게임을 만들어본다면,</p>
<p>HTML, CSS, JavaScript을 학습함은 물론 큰 성취감을 느낄 수 있을것이다.</p>
<h1>코드와 도구</h1>
<h2><a href="https://github.com/mswjs/msw">Mock Service Worker</a></h2>
<!-- raw HTML omitted -->
<p>기존의 mock API 도구 또는 서비스들은 별도로 제공되는 API 주소를 사용하기 때문에, 테스트 용도로써는 유용하지만 실 서비스 단계에서는 실 API로의 업데이트가 필요하다는 단점이 존재한다.</p>
<p>MSW(Mock Service Worker)는 ServiceWorker를 사용해 네트워크 레벨에서 mocking이 이뤄지기 때문에 실 서비스 API 주소를 테스트 단계에서도 그대로 사용할 수 있다.</p>
<pre><code class="language-js">import { setupWorker, rest } from 'msw'

const worker = setupWorker(
  // 'https://github.com/octocat'에 대한 mock response를 구성
  rest.get('https://github.com/octocat', (req, res, ctx) =&gt; {
    return res(
      ctx.delay(1500),
      ctx.status(202, 'Mocked status'),
      ctx.json({
        message: 'Mocked response JSON body',
      }),
    )
  }),
)

worker.start();
</code></pre>
<h2><a href="https://bansal.io/pattern-css">pattern.css</a></h2>
<!-- raw HTML omitted -->
<p>background에 다양한 패턴효과를 줄 수 있다.</p>
<h2><a href="https://codepen.io/martinlaxenaire/full/OJVKVYa">WebGL water ripples</a></h2>
<!-- raw HTML omitted -->
<p>WebGL base인 <a href="https://www.curtainsjs.com/">curtain.js</a>로 만든 물결효과.</p>
<h2><a href="https://github.com/hediet/vscode-debug-visualizer/blob/master/extension/README.md">Debug Visualizer</a></h2>
<p>디버깅 시 데이터 구조를 시각화해 보여주는 VS Code 확장도구로 JS/TS 및 대다수 언어들을 지원한다.</p>
<blockquote>
<p>JS/TS 외 언어들은 기본적 수준에 한해서만 지원된다.</p>
</blockquote>
<!-- raw HTML omitted -->
</content></entry><entry><title>2021-01</title><id>https://github.com/naver/fe-news/blob/master/issues/2021-01.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2021-01.md" rel="alternate"/><content type="xhtml"><h1>2021-01 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2>2020년과 이후 JavaScript의 동향 - 라이브러리와 프레임워크</h2>
<p><a href="https://d2.naver.com/helloworld/7226235">1편</a>, <a href="https://d2.naver.com/helloworld/6951656">2편</a></p>
<p>React, Angular, Vue.js 그리고 Svelte의 최근 동향을 다루는 글로, 다양한 프레임워크들의 기술적 변화와 차이점 들을 다루고 있어 여러 프레임워크들의 동향을 한눈에 파악할 수 있다.</p>
<blockquote>
<p>지난 &quot;라이브러리와 프레임워크 동향&quot; 시리즈: <a href="https://d2.naver.com/helloworld/7229119">2017</a>, <a href="https://d2.naver.com/helloworld/3259111">2018</a>, 2019(<a href="https://d2.naver.com/helloworld/7700312">1편</a>, <a href="https://d2.naver.com/helloworld/2108442">2편</a>)</p>
</blockquote>
<h2><a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html">React Server Component</a></h2>
<p>React Server Component에 대한 영상이 React 공식 블로그에 공개되었다.
현재는 아직 연구 중인 단계이지만 그 가능성에 대해 많은 설명을 하고 있다.
클라이언트 번들 사이즈를 줄이고 backend 자원에 직접 접근할 수 있는 React Server Component에 대한 글과 영상이다.</p>
<!-- raw HTML omitted -->
<p>발표 이후 <a href="https://news.ycombinator.com/item?id=25497065">해커뉴스</a>에서도 질문이 끝이지 않고 있다. Dan Abramov에게 궁금증이 있다면 여러분도 지금 답을 얻을 수 있다.</p>
<blockquote>
<p>[참고] React 코어 개발팀의 Dan Abromov 트윗에서는 Server Component에 대한 주요 내용에 대한 요약을 확인해 볼 수 있다.<br />
https://twitter.com/dan_abramov/status/1342261577475633154</p>
</blockquote>
<h2>Deview 2020</h2>
<p>Deview 2020 <a href="https://d2.naver.com/news/5751902">발표 영상</a>이 공개되었다.</p>
<p>그 중 웹 세션 발표 중 국내와 해외에서 각기 다른 이유로 BFF (Backend for Frontend) 아키텍쳐로의 전환 경험을 다루고 있어 소개한다.</p>
<h3>GraphQL</h3>
<p><a href="https://deview.kr/2020/sessions/337">GraphQL이 가져온 에어비앤비 프론트앤드 기술의 변천사(부제: REST환경에서 GraphQL 기반 UI 설계하기)</a></p>
<ul>
<li>에어비엔비에 GrahphQL을 도입하면서 BFF 아키텍쳐 구조를 만들어간 경험을 공유한 발표이다.</li>
<li>GraphQL 운영 경험에 대한 구체적인 경험이 궁금하시다면 <a href="https://deview.kr/2020/sessions/347">GraphQL API 까짓거 운영해보지 뭐</a> 발표를 보시는 것도 좋을 것 같다.</li>
</ul>
<!-- raw HTML omitted -->
<h3>Server-Side Rendering</h3>
<p><a href="https://deview.kr/2020/sessions/403">어서와, SSR은 처음이지? (네이버 블로그 Node.js 기반의 Server-Side Rendering 적용기)</a></p>
<ul>
<li>네이버 블로그에 SSR을 도입하면서 BFF 아키텍처 구조를 만들어간 경험을 공유한 발표이다.</li>
<li>SSR을 구축하기 위한 구체적인 경험이 궁금하시다면 <a href="https://deview.kr/2020/sessions/351">리액트 개발이 이렇게 쉬웠나? (feat. Next.js)</a> 발표를 보시는 것도 좋을 것 같다.</li>
</ul>
<!-- raw HTML omitted -->
<p>이 외에도 Deview 2020에서 FrontEnd 경험을 다룬 다양한 세션이 있으니 살펴보기 바란다.</p>
<blockquote>
<p>[참고] <strong>Deview 2020 FrontEnd 세션</strong></p>
<ul>
<li><a href="https://deview.kr/2020/sessions/378">묻고 한 벌로 가! (네이버 플레이스 한 벌의 코드로 모바일 웹/모바일 앱/PC 웹 서비스 확장 개발기)</a><br />
React로 만들어진 네이버 플레이스 서비스를 지도앱과 Angular 기반의 서비스에 통합시켰던 경험을 소개한다.</li>
<li><a href="https://deview.kr/2020/sessions/361">WebXR API를 이용한 웹 AR 개발, 그 한계와 대안</a><br />
현 시점에서 WebXR API를 적용하는 장점과 한계점들을 살펴보고 이를 대체할 수 있는 다른 방법들을 설명한다.</li>
<li><a href="https://deview.kr/2020/sessions/392">깃헙 4.4K 스타 billboard.js 메인테이너가 들려주는 오픈소스 개발기(부제: 톨먼이형!, 오픈소스 개발은 왜 이래?)</a><br />
네이버 오픈소스 차트 라이브러리인 billboard.js 프로젝트의 개발과 운영 경험을 통해 지속 가능한 오픈소스 메인테이너스를 위한 경험을 소개한다.</li>
<li><a href="https://deview.kr/2020/sessions/358">Deno 를 통해 알아보는 Javascript 세상 이야기</a><br />
Deno 에 대하여 알아보며 JavaScript 에서 TypeScript, Node.js에서 Deno 까지 JavScript 세상에서의 불편함을 해결 하고자 했던 기술을 소개한다.</li>
<li><a href="https://deview.kr/2020/sessions/346">성능개선 뛰어들기 (고전적 SSR 성능개선)</a><br />
네이버의 스마트어라운드 성능개선 방향과 그 여정을 소개한다.</li>
<li><a href="https://deview.kr/2020/sessions/400">egjs 오픈 서커스 오신것을 환영합니다</a><br />
복잡한 기능을 구현하기 위해서 오픈소스를 찾는 과정과 오픈소스를 활용하면서 겪을수 있는 실제 사례를 재밌게 배울 수 있는 발표이다.</li>
<li><a href="https://deview.kr/2020/sessions/336">Recoil: 왕위를 계승하는 중입니다</a><br />
Recoil이 Redux의 굳건한 왕좌를 위협할 것이라고 생각하는 근거에 대해서 얘기하고 단계별로 준비된 4가지 예제를 통해 Recoil의 단순하지만 강력한 기능을 간략하게 배워가는 발표이다.</li>
</ul>
</blockquote>
<h2>Chrome Dev Summit 2020 영상 발표</h2>
<p>Chrome Dev Summit 2020 세션 <a href="https://www.youtube.com/playlist?list=PLNYkxOF6rcIDzLmWaDwfHVZJl1Q5RFgOR">발표 영상</a>이 공개되었다.
CSS 엔진의 low-level api 인 <a href="https://houdini.how/">Houdini</a>의 발표부터 PWA, <a href="https://stories.google/">Web Story</a>, Performance까지 구글웹플랫폼의 진보된 경험을 보실 수 있다.<br />
<!-- raw HTML omitted --></p>
<h2><a href="https://wit.nts-corp.com/2020/12/28/6240">새로운 웹페이지 성능 측정 지표 CLS(Cumulative Layout Shift)</a></h2>
<p>chrome 86 업데이트에서 개발자도구 – Performance 패널 – Experience 섹션에 Cumulative Layout Shift (CLS) 라는 새로운 성능 측정 지표가 생겼다.
Web Vital의 새로운 지표인 CLS에 대해 정리한 글이다.<br />
<!-- raw HTML omitted --></p>
<h2><a href="https://jbee.io/react/thinking-about-global-state/">전역상태 관리에 대한 단상 (stale-while-revalidate)</a></h2>
<p>전역 상태 관리로 Redux를 즐겨 쓰던 개발자가 더 이상 Redux를 사용하지 않게된 이유와 회고가 담긴 글이다.
React Query, SWR, Apollo와 같은 라이브러리가 추구하는 것과 같이 API 캐싱을 통해 컴포넌트의 응집도와 편의성을 높이는 방법에 대한 고민을 설명하고 있다.<br />
<!-- raw HTML omitted --></p>
<h2><a href="https://dev.to/ryansolid/the-react-hooks-announcement-in-retrospect-2-years-later-18lm">The React Hooks Announcement In Retrospect: 2 Years Later</a></h2>
<p>React Hooks이 소개된 이후 2년이라는 시간이 지났다. 이 글은 그 기간동안 개발자의 경험을 시간 순으로 서술하고 있다.<br />
2021년에도 끝나지 않은 논쟁에 대한 여러분들 의견은 어떤가요?</p>
<h2><a href="https://www.jetbrains.com/lp/javascript-25/">25 years of JavaScript History</a></h2>
<p>IDE로 유명한 JetBrains에서 JavaScript 25주년을 맞이한 JavaScript 역사에서 주목할만한 타임라인 페이지를 공개하였습니다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://youtu.be/n1mdAPFq2Os">React / GraphQL Course - Build a social media app (MERNG Stack)</a></h2>
<p>MongoDB + Express + React + Node.js + GraphQL 스택으로 만들어 보는 소셜 미디어 앱 튜토리얼이다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://youtu.be/XD5sZWxwJUk">Build your own CANDY CRUSH using JavaScript, HTML and CSS</a></h2>
<p>JavaScript, HTML, CSS를 이용하여 드래그 앤 드랍을 구현하고 이를 이용하여 우리에게 유명한 CANDY CRUSH 라는 웹게임을 만들어 보는 영상이다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://youtu.be/ZVznzY7EjuY">NodeJS ZOOM Clone</a></h2>
<p>원격 근무에는 빠질수 없는 ZOOM 어플리케이션을 클론해보는 영상이다.</p>
<!-- raw HTML omitted -->
<h1>코드와 도구</h1>
<h2><a href="https://estimator.dev/">estimator.dev</a></h2>
<p>ES2015을 지원하는 브라우저 비율이 90%를 넘고 있다. 이 사이트는 <code>Modern JavaScript 최적화</code>를 진행한다면 얼마 만큼의 성능 향상을 기대할 수 있을지를 평가 할수 있는 툴이다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://microsoft.github.io/monaco-editor/">Monaco Editor</a></h2>
<p>VS Code의 웹 버전. NPM으로 설치해 브라우저에서 VS Code를 이용할 수 있다. 모바일 브라우저는 지원하지 않는다.</p>
<!-- raw HTML omitted -->
</content></entry><entry><title>2020-05</title><id>https://github.com/naver/fe-news/blob/master/issues/2020-05.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2020-05.md" rel="alternate"/><content type="xhtml"><h1>2020-05 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://www.freecodecamp.org/news/javascript-new-features-es2020/">10 New JavaScript Features in ES2020 That You Should Know</a></h2>
<!-- raw HTML omitted -->
<p>올해 TC39 committee가 승인한 새로운 ES2020 기능들을 간단한 예제와 함께 살펴볼 수 있는 글이다. Dynamic Import, Optional Chaining, Nullish Coalescing 등 웹 개발을 더 편리하게 만들어주는 기능들이 추가되었다.</p>
<h2><a href="https://www.kenneth-truyers.net/2018/11/01/best-practices-good-pr/">Best practices for good PR's</a></h2>
<!-- raw HTML omitted -->
<p>팀 단위로 협업을 하다 보면, 우리는 서로 PR을 올리고 리뷰를 하게 된다. PR을 단편적인 업무 공유와 단순 버그 수정 용도가 아닌, 코드 품질을 높이고 모두가 성장할 수 있는 과정으로 만들려면 리뷰어도 작성자도 노력을 기울여야 한다. 이 글에서는 어떻게 좋은 PR을 작성할 수 있는지, 그리고 또 어떻게 좋은 리뷰를 작성할 수 있는지에 대한 기본적인 가이드라인을 제시하고 있다.</p>
<h2><a href="https://medium.com/canal-tech/how-video-streaming-works-on-the-web-an-introduction-7919739f7e1">How video streaming works on the web: An introduction</a></h2>
<!-- raw HTML omitted -->
<p>Youtube와 Netflix를 필두로 한 동영상 재생 서비스 시장은 계속해서 커져나가고 있다. 웹에서의 동영상 재생 기술이 어떻게 변화되어 왔고, 현재에 이르러서는 어떤 기술을 쓰는지 확인할 수 있는 내용을 담고 있다.</p>
<h2><a href="https://blog.logrocket.com/whats-new-in-typescript-3-8/">What’s new in TypeScript 3.8</a></h2>
<!-- raw HTML omitted -->
<p>새롭게 릴리즈된 타입스크립트 3.8에서는 새롭게 추가된 ES2020의 문법들을 지원하고 있다. 이뿐만 아니라 <code>asynqc</code>에 묶이지 않고 최상위 단에서 쓸 수 있는 Top-level Await 기능도 새로이 추가되었다.</p>
<h2><a href="https://meetup.toast.com/posts/131">웹 기술로 구현하는 Adaptive HTTP Streaming</a></h2>
<!-- raw HTML omitted -->
<p>이제 웹에서의 비디오 재생은 완전한 파일을 내려받은 PD(Progressive Downloand) 방식에서 벗어나 실시간으로 사용자가 영상을 송출하고 시청하는 라이브 스트리밍에 기술의 초점이 맞춰지고 있다. 사람들은 영상을 와이파이로 보기도 하고, 고속 인터넷 선이 연결된 컴퓨터로 보기도 한다. 다들 저마다의 네트워크 속도가 다르기 때문에 원활한 영상 시청을 위해선 적절한 해상도의 영상을 내려받아야 한다. 이 글은 어떻게 네트워크 속도에 따른 원활한 영상 시청 경험을 사용자에게 제공하는지 설명하고 있다. 평소 모바일 라이브로 스포츠 경기를 보거나 Twitch 같은 스트리밍 서비스를 이용하는 사람들에겐 재밌는 글이 될 것이다.</p>
<h2><a href="https://sveltesociety.dev/">Svelte Society Day 2020</a></h2>
<blockquote>
<ul>
<li><a href="https://www.youtube.com/watch?v=0rnG-OlzGSs">전체 동영상 발표보기</a></li>
<li><a href="https://gist.github.com/sw-yx/ace62a7f6b880a3c87660ac6e663bd9a">발표 리소스 자료</a> (슬라이드, 코드 저장소 등)</li>
</ul>
</blockquote>
<!-- raw HTML omitted -->
<p>4/26일 진행된 Svelte 온라인 밋업으로, Svelte 개발자인 Rich Harris를 포함해 총 10여 개의 주제로 한 발표를 볼 수 있다.</p>
<h2><a href="https://womenofreact.com/">Women of React</a></h2>
<blockquote>
<ul>
<li><a href="https://www.youtube.com/watch?v=K8MF3aDg-bM">동영상 발표보기</a></li>
<li><a href="https://dev.to/ashc0des/women-of-react-2020-recap-51jf">컨퍼런스 요약</a></li>
</ul>
</blockquote>
<!-- raw HTML omitted -->
<p>4/25일 진행된 React 여성 개발자들이 주축으로 진행한 온라인 컨퍼런스로 총 11개의 세션으로 구성되어 있으며, 다양한 React tip부터, 테스팅, React 기술 인터뷰 준비 그리고 주요 여성 개발자들 간의 Q&amp;A와 토론 등의 알찬 내용으로 꾸며져 있다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://www.smashingmagazine.com/2018/01/deferring-lazy-loading-intersection-observer-api/">Now You See Me: How To Defer, Lazy-Load And Act With IntersectionObserver</a></h2>
<!-- raw HTML omitted -->
<p>사용자가 현재 보고 있는 화면 영역을 파악하는 것은 이미지 레이지 로딩을 통한 성능 개선은 물론 무한 스크롤이나 PIP(Picture in Picture) 같은 UX 개발에도 큰 도움을 줄 수 있다. 이 글에서는 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a>가 무엇인지 자세히 설명하고, 이를 어떻게 적용하고 활용할 수 있는지에 대한 샘플 코드를 담고 있다.</p>
<h2><a href="https://www.lambdatest.com/blog/how-smashtest-is-changing-the-way-you-write-selenium-tests/">How Smashtest is changing the way you write selenium tests</a></h2>
<!-- raw HTML omitted -->
<h1>코드와 도구</h1>
<h2><a href="https://www.digitalocean.com/community/tutorials/how-to-use-live-share-with-visual-studio-code">Visual Studio Code Live Share</a></h2>
<!-- raw HTML omitted -->
<p>개발자들이 구조 설계 회의를 거칠 때 손과 그림만으로 설명하는 것은 때로 부족할 수 있다. VS코드의 Live Share 익스텐션을 사용하면, 하나의 화면에서 모든 사람들이 동시에 코드를 편집하며 의견을 주고받을 수 있다. 코드를 편집하면 그 사람의 이름이 화면에 뜨며, 실시간으로 동일한 파일의 코드를 수정할 수 있다. 요즘처럼 재택근무가 빈번히 이루어지는 시국에 더할 나위 없이 유용한 익스텐션이 아닐 수 없다.</p>
<h2><a href="https://github.com/liriliri/eruda">Eruda</a></h2>
<!-- raw HTML omitted -->
<p>모바일 브라우저에서 사용 가능한 개발자 콘솔 도구다.
디버깅 대상 페이지에 스크립트를 로딩한 후, 초기화하는 것으로 간단하게 개발 도구를 활용할 수 있다.</p>
<h2><a href="https://github.com/ritwickdey/vscode-live-server">Live Server</a></h2>
<p>한 번의 클릭으로 실행되는 VS Code 플러그인 웹서버. Live reload가 기본적으로 지원되며, 개발 작업을 웹서버에서 확인이 필요한 경우 요긴하게 사용할 수 있다.</p>
<p>플러그인 설치 후, VS Code 우측 하단 상태 바에 추가되는 <code>Go Live</code> 버튼을 클릭하는 것으로 서버를 즉시 시작하고 종료할 수 있다.</p>
<p><img src="https://github.com/ritwickdey/vscode-live-server/raw/master/images/Screenshot/vscode-live-server-animated-demo.gif" alt="" /></p>
<h2><a href="https://ui.toast.com/weekly-pick/ko_20200320/">새로운 마크다운 파서가 필요한 이유: Toast UI Editor</a></h2>
<!-- raw HTML omitted -->
<p>UI Editor를 만들면서 맞이한 문제점을 기술하고, 그 문제를 해결하는 방법을 설명한 글이다.
Tree-Sitter, LSP와 같이 IDE에서 도입한 솔루션을 검토하고 이를 바탕으로 새로운 마크다운 파서를 개발한 내용인데, 에디터 만드는 사람에게는 꽤나 도전적이고 재미있는 글로 다가올 것이다.</p>
</content></entry><entry><title>2020-04</title><id>https://github.com/naver/fe-news/blob/master/issues/2020-04.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2020-04.md" rel="alternate"/><content type="xhtml"><h1>2020-04 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://dev.to/gregfletcher/top-front-end-development-youtube-channels-4ihg">Top Front-End Development YouTube Channels</a></h2>
<p>YouTube에는 다양한 FE 기술 콘텐츠들이 넘쳐나지만 그들 중 보석을 가려 내는 것은 쉽지 않다. 수준 높은 콘텐츠를 찾고 있다면 링크에서 소개하는 채널들은 큰 도움이 될 것이다.</p>
<p>JavaScript로 파서, 가상머신 등 로우 레벨 영역 구현을 소개하는  '<a href="https://www.youtube.com/channel/UC56l7uZA209tlPTVOJiJ8Tw">Low Level JavaScript</a>', 다양한 CSS 레이아웃들의 기술적 내용들을 다루는 '<a href="https://www.youtube.com/channel/UC7TizprGknbDalbHplROtag">LayoutLand</a>' 등의 채널들을 확인할 수 있다.</p>
<h2><a href="https://uxdesign.cc/10-rules-of-thumb-in-ui-design-aa5f91885444">10 Rules Of Thumb In UI Design</a></h2>
<!-- raw HTML omitted -->
<p>UI에서 따르면 좋을 가이드 10가지를 제시하고 있다.  최전방에서 UI를 개발하는 FE 개발자가 숙지하고 있으면 좋은 내용들이다.</p>
<h2><a href="https://brunch.co.kr/@cliche-cliche/32">뉴모피즘은 새로운 UI 트렌드가 될 수 있을까?</a></h2>
<p>시대에 따라 UI 트렌드는 변한다. 2000년대 후반에는 현실의 사물성을 그대로 표현하는 '스큐어모피즘'(Skeuomorphism)이 유행했다. 그 이후 iOS 7을 기점으로 플랫 한 디자인이 대세가 되었고, 현재는 플랫 한 디자인에 그림자를 더한 구글의 머티리얼 디자인이 UI 트렌드를 주도하고 있다. 이다음엔 어떤 UI 트렌드가 시장을 지배할까?</p>
<p>'뉴모피즘'(<a href="https://uxdesign.cc/neumorphism-in-user-interfaces-b47cef3bf3a6">Neumorphism</a>)이라고 불리는 새로운 디자인 스타일이 대두되고 있는 요즘, 이것이 구체적으로 어떤 스타일이고 앞으로 UI 트렌드를 이끌어 나갈 수 있을지 가능성과 한계에 대해 위 글에서 확인해보자.</p>
<h2><a href="https://levelup.gitconnected.com/@janvidar">Functional Programming for JavaScript Developers</a></h2>
<p>자바스크립트 개발자를 위한 함수형 프로그래밍에 대한 시리즈 글을 확인할 수 있다.</p>
<blockquote>
<p>오래전에 공개된 글이긴 하지만, 다음의 시리즈도 함수형 프로그래밍 사고적 방법으로의 접근에 도움을 얻을 수 있다.<!-- raw HTML omitted --></p>
<ul>
<li><a href="https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536#.j86p4zvzs">So You Want to be a Functional Programmer</a> (<a href="https://fedevelopers.github.io/tech.description/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EA%B0%80-%EB%90%98%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EA%B3%A0-(Part-1)/">한글 번역</a>)<!-- raw HTML omitted -->
(*원문은 총 6개 시리즈 글로 작성되었지만, 한글 번역은 5회까지 진행되었다.)
 </li>
</ul>
</blockquote>
<h2><a href="https://medium.com/better-programming/10-productivity-tools-for-front-end-developers-4021cdef6fcb">Front-End Dev Tools For increased Productivity</a></h2>
<!-- raw HTML omitted -->
<p>FE 개발자들이 UI/UX 작업을 보다 빠르고 효율적으로 진행할 수 있게 도와줄 수 있는 10여 개의 온라인 도구들을 소개한다.
 </p>
<h2><a href="https://medium.com/javascript-in-plain-english/an-abbreviated-history-of-javascript-package-managers-f9797be7cf0e">An abbreviated history of JavaScript package managers</a></h2>
<!-- raw HTML omitted -->
<p>이 글은 패키지 매니저인 npm, Yarn 그리고 pnpm의 등장 배경과 함께 어떤 문제들을 해결했는지에 대해 시간적 흐름에 따라 발전되온 패키지 매니저들의 간략한 역사를 다루고 있다.</p>
<p>가령 npm은 v1에서 Dependency hell을 해결하기 위해 등장했고, 이후 v3에서는 Flattened dependency 관리로 깊어지는 서브 디렉터리 문제 해결을 위함 이었다는 내용들을 소개한다.</p>
<h2><a href="https://medium.com/javascript-scene/what-every-unit-test-needs-f6cd34d9836d">5 Questions Every Unit Test Must Answer</a></h2>
<p>대부분의 개발자들은 단위 테스트를 작성해야 하는 사실은 잘 알고 있지만, 많은 경우 단위 테스트의 필수 요소들은 무엇인지 잘 알지 못한다는 점이다. 해당 글에서는 저자 자신의 실제 경험을 기반으로 실패하지 않는 좋은 테스트를 작성하기 위해 스스로 질문해 봐야 하는 다음의 5가지 항목들을 소개한다.</p>
<ol>
<li>What are you testing?</li>
<li>What should it do?</li>
<li>What is the actual output?</li>
<li>What is the expected output?</li>
<li>How can the test be reproduced?</li>
</ol>
<h2><a href="https://github.com/typescript-cheatsheets/react-typescript-cheatsheet">React+TypeScript Cheatsheets</a></h2>
<p>TypeScript와 React를 사용한 프로젝트 개발에서 참고할 수 있는 실행 가이드(Cheat Sheet)를 제공한다. 총 4개로 분류된 가이드를 제공해 각자 필요성에 따른 접근이 가능하다.</p>
<ul>
<li><a href="https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/blob/master/README.md#basic-cheatsheet-table-of-contents">Basic</a>: React 개발자의 TS 적용을 위한 기본 가이드</li>
<li><a href="https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/blob/master/ADVANCED.md">Advanced</a>: 고급 사용과 재사용 가능한 코드 작성 가이드</li>
<li><a href="https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/blob/master/MIGRATING.md">Migrating</a>: Plain JS, Flow 코드들의 TS 마이그레이션 가이드</li>
<li><a href="https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/blob/master/HOC.md">HOC</a>: 고차함수(High Order Component) 작성 가이드</li>
</ul>
<h2><a href="https://twitter.com/deno_land/status/1244707313006624772">Deno 1.0 will be released May 13, 2020</a></h2>
<p>Node.js를 개발했던 Ryan Dahl이 2018년 새롭게 시작했던 TypeScript 런타임 엔진인 <a href="https://github.com/denoland/deno">Deno</a> 1.0 버전의 공개가 5월 13일 릴리스될 예정이라고 트윗을 통해 밝혔다.</p>
<!-- raw HTML omitted -->
<h1>튜토리얼</h1>
<h2><a href="https://lab.github.com/">GitHub Learning Lab</a></h2>
<p>GitHub는 지난 2018년 4월 GitHub의 사용방법들을 배울 수 있는 온라인 교육 도구인 <a href="https://github.blog/2018-04-19-introducing-github-learning-lab/">GitHub Learning Lab을 발표</a>했었다.</p>
<!-- raw HTML omitted -->
<blockquote>
<p><a href="https://www.youtube.com/watch?v=9S0p8YMQzsM">GitHub Learning Lab 소개영상</a></p>
</blockquote>
<p>현재는 GitHub 사용방법에 국한하지 않고 도구와 언어(Python, Node, Java, Ruby, TensorFlow 등),  DevOps 등의 다양한 코스가 추가되었고 모두 무료로 학습할 수 있다.</p>
<p>다른 온라인 교육 서비스들 보다 좋은 점은 바로 GitHub 플랫폼에 기반해 교육이 진행된다는 점으로, 선택한 코스는 자신의 GitHub 저장소로 clone 되고 이후 과정은 자동으로 등록되는 이슈와 PR 등을 통해 진행된다.</p>
<h2><a href="https://medium.com/better-programming/react-router-v6-in-two-minutes-a7a2963e2340">React Router v6 in Three Minutes</a></h2>
<p>React Router의 차기 메이저 버전인 v6의 새로운 변화들을 소개한다. 가장 큰 변화로는 번들 크기가 이전 버전(v5)에 비해 ~70% 용량이 감소되었고, 새로운 Hooks 및 컴포넌트들의 변화에 대한 내용을 소개한다.</p>
<blockquote>
<p>현재 시점에서의 v6 최신 버전은 지난 2월 공개된 <a href="https://github.com/ReactTraining/react-router/releases/tag/v6.0.0-alpha.2">v6.0.0-alpha.2</a> 이다.</p>
</blockquote>
<h2><a href="https://www.bram.us/2020/01/10/smooth-scrolling-sticky-scrollspy-navigation/">Smooth Scrolling Sticky ScrollSpy Navigation</a></h2>
<p>사이드 바 내비게이션을 통해 페이지 내 원하는 지점으로 부드러운 페이지 스크롤을 통해 이동하는 페이지 구성 방법을 소개한다.</p>
<blockquote>
<p>완성된 데모: https://codepen.io/bramus/pen/ExaEqMJ</p>
</blockquote>
<!-- raw HTML omitted -->
<h1>코드와 도구</h1>
<h2><a href="https://github.com/ahmadawais/corona-cli">corona-cli</a></h2>
<p>COVID-19 전 세계 확산에 따라, 관련 도구들이 개발되어 공개되고 있다. 이들 중, <code>corona-cli</code>는 프롬프트 환경(CLI)에서 간단하게 전 세계 국가들의 현재 지표 값을 확인할 수 있게 한다.</p>
<pre><code class="language-sh">$ npm i -g corona-cli ## 또는 설치없이 한번만 실행하고 싶다면 'npx corona-cli'
$ corona # 전세계 통계 출력
$ corona &lt;국가명&gt; # 한국의 상황은 'corona korea'를 실행
</code></pre>
<!-- raw HTML omitted -->
<blockquote>
<p>관련된 다음의 프로젝트들도 함께 참고해 보면 좋다.</p>
<ul>
<li><a href="https://github.com/pomber/covid19">covid19</a>
매일 3차례 GitHub Action을 통해 업데이트되는 COVID-19 시계열 JSON 포맷 데이터
https://pomber.github.io/covid19/timeseries.json</li>
<li><a href="https://github.com/soroushchehresa/awesome-coronavirus">Awesome Coronavirus</a>
기술, 도구 등의 유용한 리소스들을 모아서 제공하는 &quot;Awesome&quot; 큐레이션의 형태와 같이 COVID-19 관련 개발 리소스들의 목록을 제공한다.</li>
</ul>
</blockquote>
<h2><a href="https://github.com/vsls-contrib/codetour">CodeTour</a></h2>
<p>CodeTour는 VS Code 익스텐션으로, 사용자의 코드 베이스를 기반으로 한 인터랙티브 도움말 가이드를 작성하거나 또는 재생할 수 있게 한다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://github.com/matteobruni/tsparticles">tsParticles</a></h2>
<!-- raw HTML omitted -->
<p>간단하게 particle을 만들 수 있게 해 많은 많은 사용들로부터 인기를 얻었던 <a href="https://github.com/VincentGarreau/particles.js">Particle.js</a>(2017년 마지막 업데 데이트 후로 개발 중단 상태) 프로젝트의 TS 포팅 버전이다.</p>
<h2><a href="https://github.com/saadpasta/react-blog-github">React Blog</a></h2>
<!-- raw HTML omitted -->
<p>GitHub에 이슈를 등록하면 개인 블로그의 글로 전환하여 주는 도구로 GitHub 이슈에서 사용되는 리액션 Emoji도 사용 가능하다.</p>
<p>사용방법은 react-blog-github 프로젝트를 clone 한 후, 개인 access 토큰과 GihubApp을 생성하고 간단한 설정 정보를 담는 파일을 만들면 모든 환경설정이 완료된다.</p>
<p>이후, 자신의 프로젝트에 이슈를 생성하고 'blog' 레이블을 다는 것으로 블로그에 새로운 글이 포스팅된다.</p>
<blockquote>
<p>Live demo: <a href="https://github.com/saadpasta/react-blog-github/issues?q=is%3Aissue+is%3Aopen+label%3Ablog">GitHub Issue</a> → <a href="https://saadpasta.github.io/react-blog-github/">발행글</a></p>
</blockquote>
<h2><a href="https://github.com/engine262/engine262">engine262</a></h2>
<p>JavaScript로 작성된 JavaScript(ECMA-262) 엔진으로 개발자들이 새로운 기능을 신속하게 프로토타입화하고 탐색할 수 있는 샌드박스를 갖도록 하는 도구다.</p>
<p>이와 유사하지만, 각기 다른 목적으로 개발되고 있는 유사한 JavaScript 인터프리터들은 다음과 같다.</p>
<ul>
<li>https://github.com/facebook/prepack</li>
<li>https://github.com/mozilla/narcissus</li>
<li>https://github.com/NeilFraser/JS-Interpreter</li>
<li>https://github.com/metaes/metaes</li>
<li>https://github.com/Siubaak/sval</li>
</ul>
<h2><a href="https://github.com/anephenix/sarus">Sarus</a></h2>
<p>WebSocket은 비정상적 종료에 따른 어떠한 응답도 받을 수 없다는 문제점을 해결하기 위한 JavaScript WebSocket 라이브러리다.</p>
<h2><a href="https://redux-toolkit.js.org/">Redux Toolkit</a></h2>
<p>Redux Toolkit(이전 프로젝트명 &quot;Redux Starter Kit&quot;)은 모범사례가 적용된 표준적인 Redux 로직 작성 제공을 목표로 하며, Redux 사용 시 겪게 되는 다음의 보편적인 문제들을 해결하기 위해 개발되었다.</p>
<ul>
<li>Redux 스토어 설정의 복잡성</li>
<li>Redux가 유용한 작업을 수행하도록 만들기 위해 수많은 패키지를 추가해야 하는 문제</li>
<li>Redux에는 너무 많은 boilerplate 코드가 필요한 문제</li>
</ul>
<pre><code class="language-sh"># 가장 간편한 사용방법은 CRA로 프로젝트 생성 시 Redux+JS 템플릿을 사용하는 것이다.
npx create-react-app my-app --template redux
</code></pre>
</content></entry><entry><title>2020-10</title><id>https://github.com/naver/fe-news/blob/master/issues/2020-10.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2020-10.md" rel="alternate"/><content type="xhtml"><h1>2020-10  <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html">Introducing the New JSX Transform</a></h2>
<p>JSX는 일반 JavaScript 코드로 transpile 되지 않으면, 브라우저는 이해하지 못한다. 따라서 아래 예제 코드와 같이 작성된 코드는 React.createElement를 사용하도록 변환된다.</p>
<pre><code class="language-jsx">import React from 'react';

// 작성된 코드
function App() {
  return &lt;h1&gt;Hello World&lt;/h1&gt;;
}

// 변환된 코드
function App() {
  return React.createElement('h1', null, 'Hello world');
}
</code></pre>
<p>그러나, <code>React.createElement</code>의 사용은 다음의 2가지 문제가 존재한다.</p>
<ul>
<li>React 스코프 내에 있어야 하는 문제 (즉, React import를 필요)</li>
<li>적용된 일부 <a href="https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md#motivation">성능 향상과 단순화</a>를 지원하지 못하는 문제</li>
</ul>
<p>새로운 Transform은 <a href="https://babeljs.io/blog/2020/03/16/7.9.0#a-new-jsx-transform-11154httpsgithubcombabelbabelpull11154">Babel 개발팀과의 협업</a>을 통해 다음의 이점들을 제공한다.</p>
<ul>
<li>React import 없이 JSX를 사용</li>
<li>번들 크기의 개선(사용자의 설정 환경에 따라 다를 수 있다.)</li>
<li>학습이 필요한 React의 개념적 부분을 감소시켜 주는 개선을 활성화한다.</li>
</ul>
<p>새로운 Transform은 <code>React 17</code>(향후 0.14.x, 15.x, 16.x 들도 지원 예정)을 통해 사용할 수 있으며, 컴파일러(Babel, TS) 전용 entry point를 제공해 <code>React.createElement</code> 대신 특별한 함수를 자동으로 import 하고 사용하도록 변환된다.</p>
<pre><code class="language-jsx">// 작성된 코드 (React import 없이 작성)
function App() {
  return &lt;h1&gt;Hello World&lt;/h1&gt;;
}

// 변환된 코드 (아래 모듈은 컴파일러를 통해 자동 import)
import {jsx as _jsx} from 'react/jsx-runtime';

function App() {
  return _jsx('h1', { children: 'Hello world' });
}
</code></pre>
<h2><a href="https://momentjs.com/docs/#/-project-status/">We now generally consider Moment to be a legacy project in maintenance mode</a></h2>
<p>Moment 라이브러리가 더 이상의 기능 추가 없이 유지 보수만 한다.</p>
<h3>대안 라이브러리</h3>
<ul>
<li><a href="https://moment.github.io/luxon/">Luxon</a>: Moment의 진화로 생각할 수 있다. 오랜 기간 Moment 컨트리뷰터인 Isaac Cambron이 개발하고 있다.</li>
<li><a href="https://day.js.org/">Day.js</a>: 유사한 API를 사용하여 Moment를 최소한으로 대체하도록 설계되었다.</li>
<li><a href="https://date-fns.org/">date-fns</a>: Date 객체를 조작하기 위한 다양한 함수를 제공한다.</li>
<li><a href="https://js-joda.github.io/js-joda/">js-Joda</a>: JSR-310 기반의 Java SE8 java.time 패키지를 포팅 하였다.</li>
</ul>
<h2><a href="https://medium.com/@arsenyyankovsky/effective-limited-parallel-execution-in-javascript-ea2a1fb9a632">Effective limited parallel execution in JavaScript</a></h2>
<p>병렬 실행에 효과적으로 제한을 두는 방법이다.</p>
<p>간단한 예제를 통해서 적절하게 병렬 실행을 제한할 수 있는 방법을 알려 준다.
<a href="https://www.npmjs.com/package/@supercharge/promise-pool">promise-pool</a></p>
<!-- raw HTML omitted -->
<h2><a href="https://medium.com/swlh/the-ugly-side-of-hooks-584f0f8136b6">The Ugly Side of React Hooks</a></h2>
<p>요즘 많은 React 관련 글들이 class component보다는 hooks를 권장하는데, 제목에서 알 수 있듯, 이 글은 그와 반대이다. <a href="https://reactjs.org/docs/hooks-intro.html#motivation">React 공식 문서에서 말하는 hooks의 motivation</a>을 하나하나 집으며 비판한다.</p>
<h2><a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">Vue.js 3.0 &quot;One Piece&quot;</a></h2>
<p>오랜 개발 기간 끝에 드디어 Vue 3.0(코드명 &quot;One Piece&quot;)의 공식 릴리스가 공개되었다. Progressive framework 콘셉트를 지향하는 Vue.js의 새로운 출발을 주목해 보자.</p>
<h2><a href="https://deno.land/posts/v1.4">Deno 1.4</a></h2>
<p>TypeScript 런타임인 Deno의 새로운 버전인 1.4가 릴리스가 공개되었다. 이번 릴리스에는 웹소켓 지원과 개발 환경에서 사용할 수 있는 watch 모드 지원이 추가되었다. 점점 실무에서 활발한 사용이 증가할 것으로 기대된다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://dev.to/alexi_be3/react-component-patterns-49ho">React Component Patterns</a></h2>
<!-- raw HTML omitted -->
<p>다양한 React Component 패턴(Compound, Flexible Compound 그리고 Provider Pattern)들을 소개하고, 각 패턴들의 사용이 어떤 경우에 적합한지 그리고 각각의 trade-offs 들을 소개한다.</p>
<h2><a href="https://github.com/streamich/react-use?fbclid=IwAR0dAgNKsxJAbxoU8VhJ87esulCxP2AyVoxQb_R01O6nM0B44MPyeYfGvEA">React-use hooks</a></h2>
<p>React에서 사용하는 사용자 정의(custom) hook 이다. 유용한 hook이 많이 있으니 개발할 때 만들기 보다 필요한 hook을 찾고 이용해 보면 좋다.</p>
<h2><a href="https://dev.to/hemanth/logical-assignment-operators-in-javascript-inh?utm_source=ESnextNews.com&amp;utm_medium=Weekly+Newsletter&amp;utm_campaign=2020-09-01">Logical assignment operators in JavaScript</a></h2>
<p>논리 할당 연산자가 (EcmaScript 2021)에 추가될 예정이다. <a href="https://dev.to/hemanth/stage-4-features-5a26">stage-4</a></p>
<p>간략하게 알아보면,</p>
<h3>OR 연산</h3>
<pre><code class="language-javascript">x ||= y;
</code></pre>
<pre><code class="language-js">x || (x = y)
</code></pre>
<p>두 표현식은 동일하다.</p>
<h3>AND 연산</h3>
<pre><code class="language-javascript">x &amp;&amp;= y;
</code></pre>
<pre><code class="language-js">x &amp;&amp; (x = y);
</code></pre>
<p>두 표현식은 동일하다.</p>
<h2><a href="https://blog.kommit.co/a-gentle-introduction-to-code-splitting-with-react-395ddf44b71b">A Gentle Introduction to Code Splitting with React</a></h2>
<p>React를 사용한 프로젝트에서 코드 분할 방법을 설명한다.</p>
<h3>분할하는 방법</h3>
<ol>
<li>Route level
<pre><code class="language-jsx">import React, { Suspense } from 'react';
import { Location, Router } from '@reach/router';

import Loading from './components/Loading';

const Home = React.lazy(() =&gt; import('./components/Home'));
const AppointmentForm = React.lazy(() =&gt; import('./components/AppointmentForm'));
const PreviousAppointments = React.lazy(() =&gt; import('./components/PreviousAppointments'));

class App extends React.Component {
  render() {
    return (
      &lt;Location&gt;
        {({ location }) =&gt; (
          &lt;Suspense fallback={&lt;Loading /&gt;}&gt;
            &lt;Router location={location}&gt;
              &lt;Home path=&quot;/&quot; /&gt;
              &lt;AppointmentForm path=&quot;/newAppointment&quot; /&gt;
              &lt;PreviousAppointments path=&quot;/previousAppointments&quot; /&gt;
            &lt;/Router&gt;
          &lt;/Suspense&gt;
        )}
      &lt;/Location&gt;
    );
  }
}
</code></pre>
</li>
<li>Component level
<pre><code class="language-jsx">class PreviousAppointments extends Component {
  constructor(props) {
    super(props);

    this.state = { map: null };

    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    import('./components/Map').then(module =&gt;
      this.setState(() =&gt; ({
        map: module.default,
      })),
    );
  }

  render() {
    const { map: Map } = this.state;

    return (
      &lt;&gt;
        &lt;div&gt;Previous Appointments&lt;/div&gt;
        ...
        {Map ? &lt;Map /&gt; : &lt;button onClick={this.handleClick}&gt;Show Map&lt;/button&gt;}
      &lt;/&gt;
    );
  }
}
</code></pre>
</li>
</ol>
<p>두 분할 방법을 잘 이용해서 성능을 높이고 사용자 경험을 최적화 시키자.</p>
<h2><a href="https://github.com/tc39/proposal-decorators">Decorators</a></h2>
<p>2020년 9월에 제시된 데코레이터들이다.</p>
<p>몇 가지만 살펴보면,</p>
<h3>@logged</h3>
<p>메서드의 시작과 끝에 로그를 출력한다.</p>
<pre><code class="language-javascript">import { logged } from &quot;./logged.mjs&quot;;

class C {
  @logged
  m(arg) {
    this.#x = arg;
  }

  @logged
  set #x(value) { }
}

new C().m(1);
// starting m with arguments 1
// starting set #x with arguments 1
// ending set #x
// ending m
</code></pre>
<h3>@tracked</h3>
<p>필드 값을 추적(tracking)해 값의 변경이 발생되면, render 메서드를 트리거 한다.</p>
<pre><code class="language-javascript">import { tracked } from &quot;./tracked.mjs&quot;;

class Element {
  @tracked counter = 0;

  increment() { this.counter++; }

  render() { console.log(counter); }
}

const e = new Element();
e.increment();  // logs 1
e.increment();  // logs 2

</code></pre>
<h1>도구</h1>
<h2><a href="https://github.com/GoogleChromeLabs/comlink">Comlink</a></h2>
<!-- raw HTML omitted -->
<blockquote>
<p>예제 코드 이미지 (클릭하면 확대해서 볼 수 있다.)</p>
</blockquote>
<p>크롬 개발팀에서 공개한 아주 작은 크기(1.1kb)의 라이브러리로, WebWorkers 사용에 대한 초기 접근 장벽을 제거해 준다. 좀 더 추상적 수준에서 보자면, postMessage와 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">ES6 Proxies</a>에 대한 <a href="https://ko.wikipedia.org/wiki/%EC%9B%90%EA%B2%A9_%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80_%ED%98%B8%EC%B6%9C">RPC</a> 구현이라 할 수 있다.</p>
<p>Webpack을 번들러로 사용하고 있다면 <a href="https://github.com/GoogleChromeLabs/comlink-loader">comlink-loader</a>를 같이 사용해, 코드의 일부 수정(또는 없이)을 통해 사용되는 모듈들을 WebWorkers 스레드에서 실행될 수 있도록 만들 수도 있다.</p>
<h2><a href="https://cli.github.com/">GitHub CLI</a></h2>
<p>GitHub의 공식 CLI 도구로 Beta 기간을 끝내고, 얼마 전 1.0 버전을 선보였다. 터미널 상에서 GitHub PR을 만들거나 관리도 할 수 있다.</p>
</content></entry><entry><title>2021-06</title><id>https://github.com/naver/fe-news/blob/master/issues/2021-06.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2021-06.md" rel="alternate"/><content type="xhtml"><h1>2021-06 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을거리</h1>
<h2><a href="https://designsystemsrepo.com/">Design Systems Repo</a></h2>
<!-- raw HTML omitted -->
<p>최근 들어 디자인 시스템에 대한 관심이 많아지고 있고, 그에 비례해 다양한 디자인 시스템들이 공개되고 있다. 그러나 잘 만들어진 디자인 시스템을 검색하고 찾아보는 것은 쉽지 않다.</p>
<p>Design System Repo에서는 여러분들이 영감받을 수 있는 큐레이션 된 다양한 디자인 시스템 목록과 스타일 가이드, 패턴 라이브러리 그리고 관련 문서와 컨퍼런스 등, 디자인 시스템과 관련된 방대한 리소스 들을 찾아볼 수 있다.</p>
<h2><a href="https://www.mgaudet.ca/technical/2021/5/4/implementing-private-fields-for-javascript">Implementing Private Fields For JavaScript</a></h2>
<p>Firefox JavaScript 엔진인 <a href="https://spidermonkey.dev/">SpiderMonkey</a> 팀에서 일하고 있는 저자는 새로운 JavaScript 언어의 기능을 구현할 때 제정된 명세의 구현 과정에서의 현실적 어려움(언어 규격을 벗어나는 등의)을 다루는 글이다.</p>
<p>저자는 class field proposal을 통해 제안된 <a href="https://github.com/tc39/proposal-class-fields#private-fields">Private fields</a> 예를 통해 명세와 구현의 현실적 차이를 설명한다.</p>
<h2><a href="https://medium.com/leaningtech/a-javascript-optimizing-compiler-3fd3f49bd071">A JavaScript optimizing compiler</a></h2>
<!-- raw HTML omitted -->
<p>JavaScript 코드를 최적화된 JavaScript로 컴파일 하는 실험적 시도에 관한 흥미로운 글로, 대상 JavaScript 코드를 LLVM 중간 표현식(Intermediate Representation)으로 변환한 후, 최적화된 IR(중간 표현식)을 통해 다시 JavaScript 코드를 생성하는 접근 방식을 취한다.</p>
<blockquote>
<p>최적화에 대한 결과는 아래 링크를 통해 직접 벤치마크를 수행해 볼 수 있다.<!-- raw HTML omitted -->
https://carlopi.github.io/js-opt-benchmark/</p>
</blockquote>
<h2><a href="https://leerob.io/blog/react-state-management">Past, Present, and Future of React State Management</a></h2>
<p>2013년 등장한 React는 UI의 상태를 표현하는 함수라는 패러다임 전환을 가져왔고, React는 컴포넌트가 어떻게 보이게 될지를 상태에 기반해 처리한다. 이처럼 React는 '상태'라는 아이디어에 기반해 만들어졌다 할 수 있다.</p>
<p>글의 저자는 과거와 오늘날에 이르기까지 등장했던  다양한 상태 관리자들과 기본적 개념들과 어떤 문제들을 해결하고자 했는지를 포괄적으로 다루고 있다.</p>
<h2><a href="https://events.google.com/io/program/content?4=topic_web&amp;lng=ko">Google I/O 2021: Web 영역</a></h2>
<p>구글의 연례 개발자 행사인 Google I/O 2021이 지난 5월 18일 ~ 20일, 3일간 진행되었고, 다채로운 내용들이 발표되었다.
Front-end 영역 관점에서, 웹 영역 세션들을 통해 구글이 어떤 기술 영역에 집중하고 있는지를 가늠해 볼 수 있다.</p>
<h2><a href="https://medium.com/jung-han/%EB%9D%BC%EC%9D%B4%ED%8A%B8%ED%95%98%EC%9A%B0%EC%8A%A4-%EC%84%B1%EB%8A%A5-%EC%A7%80%ED%91%9C-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0-83df3dc96fb9">라이트하우스 성능 지표 살펴보기</a></h2>
<!-- raw HTML omitted -->
<p>웹 품질 측정을 위한 도구로는 여러 도구가 있겠지만, 그중 가장 유명한 것은 단연 구글에서 제공하는 Lighthouse 일 것이다.</p>
<p>Lighthouse를 이용하면 어렵지 않게 웹 품질을 측정하고 확인할 수 있는데, 이때 측정 결과는 여러 지표들의 점수로서 나타나게 된다. 각 지표의 점수가 높을수록 좋다는 것은 직관적으로 알 수 있지만, 각 지표의 정확한 의미를 알기는 조금 어려울 수 있다.</p>
<p>본 글에서는 Lighthouse의 각 지표들의 의미를 그림과 함께 알기 쉽게 설명하여 이해를 돕는다.</p>
<h2><a href="https://abseil.io/resources/swe-book">Software Engineering at Google</a></h2>
<!-- raw HTML omitted -->
<p>O'Reilly에서 출간한 Software Engineering at Google 책이 PDF 파일로 무료 공개되었다.</p>
<p>소프트웨어 엔지니어링이란 무엇인가라는 근본적인 내용부터 시작하여 팀으로 일하기, 지식 공유하기 등 전반적인 소프트웨어 엔지니어링에 대해 다룬다.</p>
<h2><a href="https://medium.com/technogise/journey-of-improving-react-app-performance-by-10x-9195d4b483d4">Journey of Improving React App Performance by 10x</a></h2>
<!-- raw HTML omitted -->
<p>React Application의 성능을 향상시켰던 방법을 알려준다.</p>
<ul>
<li><code>render</code>에서 inline 함수 제거</li>
<li>상태가 변경되는 경우만, Redux Store 업데이트</li>
<li>조건부 렌더링 적용</li>
<li>불필요한 <code>await</code>을 제거하고 적용 가능하면 <code>Promise.all()</code> 사용</li>
</ul>
<h2><a href="https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/">The future of Internet Explorer on Windows 10 is in Microsoft Edge</a></h2>
<p>MS에서 Windows 데스크톱의 IE 지원을 2022년 6월 15일부로 종료하겠다고 공식 발표하였다.</p>
<h2><a href="https://turriate.com/articles/modern-javascript-everything-you-missed-over-10-years">Modern Javascript: Everything you missed over the last 10 years (ECMAScript 2020)</a></h2>
<p>ECMAScript는 매년 새 버전을 발표하며 빠르게 변화하고 있어 최신 기술 스펙을 놓치기에 십상이다. 최근 10년 동안의 새로 발표된 내용들을 한곳에 모아 보기 쉽게 정리한 글이다.</p>
<h1>튜토리얼</h1>
<h2><a href="https://web.dev/learn/css/">Learn CSS</a></h2>
<p>구글의 <a href="https://web.dev/">web.dev</a> 팀에서 공개한 튜토리얼로, CSS의 기본적인 내용들을 이해하기 쉽게 항목들을 세분화하고 CSS를 효과적으로 사용하는 방법을 설명한다. 박스 모델, 셀렉터, 크기 단위, 플렉스 박스, 가상 요소/클래스 등 거의 모든 CSS 스펙들을 다루며, 각각의 항목들은 관련 podcast와 인터랙티브 데모가 제공된다.</p>
<h2><a href="https://www.smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/">Building A Rich Text Editor (WYSIWYG)</a></h2>
<!-- raw HTML omitted -->
<p>커스텀 가능한 리치 텍스트 편집기를 만들 수 있는 JavaScript 라이브러리 <a href="https://github.com/ianstormtaylor/slate">Slate</a>를 사용해 위지윅(WYSIWYG) 편집기를 구현하는 방법을 상세히 설명한다.</p>
<h2><a href="https://css-tricks.com/how-to-create-actions-for-selected-text-with-the-selection-api/">How to Create Actions for Selected Text With the Selection API</a></h2>
<!-- raw HTML omitted -->
<p>텍스트 에디터에서 문장 선택 시, 선택 영역 위에 메뉴가 나타나는 것을 본 적이 있을 것이다. 웹에서는 어떻게 이것을 구현할 수 있을까? 다소 생소할 수 있는 API인 Selection API를 이용하여 이를 웹에서 구현하는 방법을 설명한다.</p>
<h2><a href="https://codingfantasy.com/">Coding Fantasy: Learn Flexbox by Playing a Coding Game</a></h2>
<!-- raw HTML omitted -->
<p>flexbox를 이용하면 레이아웃 작업을 비교적 쉽게 진행할 수 있다. 게임을 통해 flexbox 개념을 학습할 수 있도록 돕는다.</p>
<h2><a href="https://www.smashingmagazine.com/2021/05/get-started-whac-a-mole-react-game/">Get Started With React By Building A Whac-A-Mole Game</a></h2>
<!-- raw HTML omitted -->
<p>React를 이용해 두더지 잡기(Whac-A-Mole) 게임을 만들어본다. React의 기초부터 하나씩 구현을 진행한다. 기초 개념들도 함께 설명해 주기 때문에 React 입문자도 따라 해보기 좋다.</p>
<h1>코드와 도구</h1>
<h2><a href="https://github.com/NotionX/react-notion-x">React Notion X</a></h2>
<!-- raw HTML omitted -->
<p>인기를 끌고 있는 메모 애플리케이션인 Notion의 콘텐츠를 React로 렌더링 할 수 있게 하는 TypeScript로 작성된 도구다.</p>
<pre><code class="language-js"># 1) Notion 콘텐츠를 얻어온다.
import { NotionAPI } from 'notion-client'

const notion = new NotionAPI()
const recordMap = await notion.getPage('067dd719a912471ea9a3ac10710e7fdf')

# 2) 얻어온 콘텐츠를 React를 통해 렌더링한다.
import React from 'react'
import { NotionRenderer } from 'react-notion-x'

export default ({ recordMap }) =&gt; (
  &lt;NotionRenderer recordMap={recordMap} fullPage={true} darkMode={false} /&gt;
)
</code></pre>
<p>예를 들어, 다음의 Notion 콘텐츠를</p>
<ul>
<li>https://www.notion.so/Notion-Kit-Test-Suite-067dd719a912471ea9a3ac10710e7fdf</li>
</ul>
<p>React 애플리케이션에서 로딩해 다음과 같이 웹사이트를 만들 수 있다.</p>
<ul>
<li>https://react-notion-x-demo.transitivebullsh.it/</li>
</ul>
<h2><a href="https://github.com/mechaniac/Map-of-Javascript">Map of JavaScript</a></h2>
<!-- raw HTML omitted -->
<p>JavaScript와 HTML, DOM 그리고 JavaScript에서의 데이터구조와 알고리즘을 각각 한장의 Map 이미지 형태로 확인해 볼수 있다.</p>
<h2><a href="https://wwit.design/">WWIT</a></h2>
<p>최신 iOS 앱들의 UI 디자인 패턴들의 스크린숏 모음을 제공하는 <a href="https://mobbin.design/">Mobbin</a>에 영감을 받은 <code>WWIT(What Was IT)</code>은 한국에서 개발된 iOS 모바일 디자인 패턴들에 대한 스크린숏을 모아서 볼 수 있도록 제공한다.</p>
<p>iOS 앱들이라 하더라도 많은 경우 상세 화면들은 웹뷰를 통해 구현되는 경우가 많아, Front-end 관점에서도 UI/UX에 대한 영감을 얻을 수 있어 참고할만하다.</p>
<h2><a href="https://www.screensizes.app/">Screen Sizes</a></h2>
<p>다양한 Apple 기기들에 대한 세밀한 디스플레이 정보를 한눈에 확인해 볼 수 있다.</p>
<h2><a href="https://csshell.dev/">CSS Hell</a></h2>
<p>일반적인 CSS 오류들에 대한 모음과 수정 방법을 제공한다.</p>
<h2><a href="https://blog.stackblitz.com/posts/introducing-webcontainers/">Introducing WebContainers: Run Node.js natively in your browser</a></h2>
<!-- raw HTML omitted -->
<p>Node.js 환경을 브라우저에서 실행할 수 있게 되었다. 심지어 로컬 환경보다 빌드 및 패키지 설치가 빠르며, 브라우저 샌드박스 안에서 실행되므로 안전하다고 한다.</p>
<p>public beta 버전이긴 하나, <a href="https://stackblitz.com/">이곳</a>에서 직접 사용해 볼 수 있다.</p>
</content></entry><entry><title>2020-02</title><id>https://github.com/naver/fe-news/blob/master/issues/2020-02.md</id><updated>2021-08-04T01:40:26+00:00</updated><link href="https://github.com/naver/fe-news/blob/master/issues/2020-02.md" rel="alternate"/><content type="xhtml"><h1>2020-02 <!-- raw HTML omitted --></h1>
<h1>링크 &amp; 읽을꺼리</h1>
<h2><a href="https://illustrated.dev/">Illustraded.dev</a></h2>
<p>FE 기술들에 대한 근본적인 개념을 도식화해 설명해 주며, GraphQL, Babel, React Hooks 등에 대한 주제들이 포함되어 있다.</p>
<!-- raw HTML omitted -->
<h2><a href="https://free-for.dev/">free-for.dev</a></h2>
<p>무료로 사용할 수 있는 다양한 기반 서비스(SaaS, PaaS, IaaS, etc.)들의 방대한 목록들을 제공한다.</p>
<blockquote>
<p>ex) 메이저 클라우드 서비스 제공자들 목록:</p>
<ul>
<li><a href="https://aws.amazon.com/free/?awsf.Free%20Tier%20Types=categories%23alwaysfree">AWS 프리 티어</a></li>
<li><a href="https://azure.microsoft.com/en-us/free/">Microsoft Azure</a></li>
<li><a href="https://www.oracle.com/cloud/free/">Oracle Cloud Free Tier</a></li>
<li><a href="https://www.ibm.com/cloud/free/">IBM Cloud free tier</a></li>
</ul>
</blockquote>
<h2><a href="https://ebookfoundation.github.io/free-programming-books/">List of Free Learning Resources</a></h2>
<p>무료로 제공되는 다양한 프로그래밍 서적, 리소스, 온라인 교육과정들에 대한 방대한 목록을 제공하며, 한글로 작성된 콘텐츠 목록도 다수 포함하고 있다.</p>
<blockquote>
<p>한글 컨텐츠는 AWS, Docker, Git, JavaScript, LaTex, Python 등의 주제가 등록되어 있다.
https://ebookfoundation.github.io/free-programming-books/free-programming-books-ko.html</p>
</blockquote>
<h2><a href="https://webassembly-summit.org/">WebAssembly Summit</a></h2>
<!-- raw HTML omitted -->
<p>지난 2월10일 구글 본사에서 진행된 웹어셈블리 개발자 써밋. 전체 발표 동영상은 아래 링크를 통해 확인할 수 있다.</p>
<ul>
<li>발표 동영상: https://www.youtube.com/watch?v=WZp0sPDvWfw</li>
</ul>
<h2><a href="https://schepp.dev/posts/today-the-trident-era-ends/">Today, the Trident Era Ends</a></h2>
<p>IE의 렌더링 엔진 <a href="https://en.wikipedia.org/wiki/Trident_(software)">Trident</a>의 지난 기록을 돌아보는 글로, 과거 IE가 도입했던 몇몇 혁신적인 기술적 내용들을 돌아본다.</p>
<blockquote>
<ul>
<li>과거 웹사이트들은 IE와 같이 특정 브라우저에서만 동작이 보장되는 경우가 많아, 다음과 같은 아이콘을 사이트에 노출하기도 했었다.
<img src="https://schepp.dev/img/ieget_animated.gif" alt="" /></li>
<li>관련해서 HackerNews에서 이뤄지고 있는 <a href="https://news.ycombinator.com/item?id=22146629">다양하고 흥미 있는 의견들</a>도 함께 참고해 보기 바란다.</li>
</ul>
</blockquote>
<h2><a href="https://almanac.httparchive.org/en/2019/table-of-contents">Web Almanac 2019</a></h2>
<p>Web Almanac은 <a href="https://httparchive.org/">HTTP Archive</a>를 통해 수집된 다양한 웹사이트 데이터에 연례 보고서로 전 세계 웹사이트들의 사용 현황(페이지 내의 JS 크기, 이미지 크기 등과 같은)을 살펴볼 수 있다.</p>
<h2><a href="https://www.native.directory/">React Native Directory</a></h2>
<p>큐레이션된 다양한 React Native 라이브러리들의 목록을 제공한다.</p>
<!-- raw HTML omitted -->
<h1>튜토리얼</h1>
<h2><a href="https://css-tricks.com/practical-css-scroll-snapping/">Practical CSS Scroll Snapping</a></h2>
<p>사용자의 스크롤 액션에 따라 뷰포트를 특정 요소 또는 위치에 잠금(lock) 되도록 만들 수 있는 'CSS Scroll Snap'의 다양한 실용적 사용 방법들을 소개한다.</p>
<blockquote>
<p>CSS Scroll Snap는 CSS 만으로 다음과 같은 캐로셀 인터렉션을 쉽게 구현할 수 있다.</p>
</blockquote>
<!-- raw HTML omitted -->
<h2><a href="https://medium.com/@michael.karen/learning-modern-javascript-with-tetris-92d532bcd057">Learning Modern JavaScript with Tetris</a></h2>
<p>JavaScript로 테트리스를 구현해 가는 과정을 step-by-step 형식으로 설명한다.</p>
<h2><a href="https://medium.com/swlh/typescript-unit-testing-with-test-coverage-2cc0cc6f3fd1">TypeScript Unit Testing with Test Coverage</a></h2>
<p>TypeScript를 사용한 프로젝트의 테스트 커버리지를 출력을 설정하는 방법을 설명한다.</p>
<h2><a href="https://csslayout.io/">CSS Layout</a></h2>
<p>CSS로 작성된 인기 있는 레이아웃과 패턴들의 코드를 제공해, 초기 페이지 레이아웃 구성 시 참고해 빠르게 레이아웃을 구성할 수 있도록 도와준다.</p>
<h2><a href="https://tesseract.projectnaptha.com/">Tesseract.js | Pure Javascript Multilingual OCR</a></h2>
<p>인기 있는 OCR 엔진인 <a href="https://github.com/tesseract-ocr/tesseract">tesseract</a>의 순수 JavaScript 포팅 버전으로 한국어도 지원된다.</p>
<!-- raw HTML omitted -->
<h1>코드와 도구</h1>
<h2><a href="https://github.com/you-dont-need/You-Dont-Need">You Don't Need</a></h2>
<p>Moment.js, Lodash, Redux, jQuery 등과 같은 도구/라이브러리/패턴들의 사용을 대체할 수 있는 방법(코드 예제)들이 제공된다.</p>
<p>ex) Underscore/Lodash의 <code>_.dropRight()</code>은 다음의 네이티브 코드로 대체할 수 있다.</p>
<pre><code class="language-js">_.dropRight([1, 2, 3]);
// =&gt; [1, 2]

_.dropRight([1, 2, 3], 2);
// =&gt; [1]

// Native
[1, 2, 3].slice(0, -1);
// =&gt; [1, 2]

[1, 2, 3].slice(0, -2);
// =&gt; [1]
</code></pre>
<h2><a href="https://github.com/minimaxir/big-list-of-naughty-strings/">Big List of Naughty Strings</a></h2>
<p>문제를 일으킬 수 있는 다양한 텍스트 입력값의 모음을 제공해
입력값 테스트 시 예외적 항목들을 테스트해 볼수 있다.</p>
<blockquote>
<ul>
<li>텍스트: https://github.com/minimaxir/big-list-of-naughty-strings/blob/master/blns.txt</li>
<li>JSON: https://github.com/minimaxir/big-list-of-naughty-strings/blob/master/blns.json</li>
</ul>
</blockquote>
<p>ex) 예제에 포함된 2 바이트 문자열 테스트 값은 다음과 같다.</p>
<pre><code class="language-sh">#	Two-Byte Characters
#
#	Strings which contain two-byte characters: can cause rendering issues or character-length issues

田中さんにあげて下さい
パーティーへ行かないか
和製漢語
部落格
사회과학원 어학연구소
찦차를 타고 온 펲시맨과 쑛다리 똠방각하
社會科學院語學研究所
울란바토르
𠜎𠜱𠝹𠱓𠱸𠲖𠳏
</code></pre>
<h2><a href="https://tiny-helpers.dev/">Tiny helpers</a></h2>
<p>웹 개발에 사용할 수 있는 다양한 온라인 개발 도구들의 목록을 제공한다.</p>
<p>ex) 확인할 수 있는 몇가지 도구들은 다음과 같다.</p>
<ul>
<li><a href="https://www.0to255.com/">0to255</a>
밝거나 어두운 색상 컬러 코드를 쉽게 고를 수 있게 제공한다.</li>
<li><a href="https://astexplorer.net/">AST explorer</a>
다양한 파서들로부터 생성된 AST(Abstract Syntax Tree)를 탐색할 수 있게 한다.</li>
</ul>
<h2><a href="https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/whats-new/2019/12/devtools">What's new in DevTools (Microsoft Edge 80)</a></h2>
<p>Chromium 기반의 MS Edge 브라우저가 정식 발표된 이후, Edge만의 고유한 기능들이 하나둘씩 추가되고 있으며
MS Edge 80 개발자 도구에 추가된 새로운 업데이트 내용을 통해 몇몇 기능들을 소개하고 있다.</p>
<p>ex) <code>3D View</code> 기능은 페이지의 DOM 또는 z-index stacking context 시각화를 3D로 제공해 디버깅 할수 있도록 한다.
<!-- raw HTML omitted --></p>
<h2><a href="https://jsonnet.org/learning/tutorial.html">Jsonnet - The Data Templating Language</a></h2>
<p><code>jsonn</code> 확장자를 갖는 데이터 템플릿팅 언어로 설정관련 데이터 등을 손쉽게 관리할 수 있게 한다.  결과물은 <code>.json</code>, <code>.ini</code>, <code>.sh</code> 등의 다양한 확장자로 출력할 수 있다.</p>
<p>ex) 아래의 <code>.jsonnet</code> 파일을 통해</p>
<pre><code class="language-js">// example.jsonnet
local Person(name='Alice') = {
  name: name,
  welcome: 'Hello ' + name + '!',
};
{
  person1: Person(),
  person2: Person('Bob'),
}
</code></pre>
<p>다음의 <code>.json</code> 파일을 출력한다.</p>
<pre><code class="language-js">// output.json
{
  &quot;person1&quot;: {
    &quot;name&quot;: &quot;Alice&quot;,
    &quot;welcome&quot;: &quot;Hello Alice!&quot;
  },
  &quot;person2&quot;: {
    &quot;name&quot;: &quot;Bob&quot;,
    &quot;welcome&quot;: &quot;Hello Bob!&quot;
  }
}
</code></pre>
<h2>온라인 데모</h2>
<ul>
<li><a href="https://codepen.io/petrbroz/pen/OJJYGXv">Forge Viewer: Get Fragment Properties</a><!-- raw HTML omitted --> 유명한 3D 설계 프로그램을 개발하는 AutoDesk에서 제공하는 클라우드 기반의 도구인 <a href="https://forge.autodesk.com/en/docs/viewer/v2/developers_guide/overview/">Forge</a>를 사용해 구현한 뷰어 데모</li>
<li><a href="https://codepen.io/ReGGae/pen/povjKxV">Infinite draggable webgl slider.</a>: WebGL로 shader 프로그래밍 해서 캐로셀 전환 효과를 구현한 데모</li>
<li><a href="https://codepen.io/alphardex/pen/VwwVLdM">Button Collection</a>: 버튼에 적용할 수 있는 다양한 애니메이션 전환 효과 데모</li>
<li><a href="https://codepen.io/cobra_winfrey/pen/BayQeyr">Sweaterize Yo'self</a>: 화상 카메라를 통해 촬영된 실시간 이미지에 니팅 패턴을 적용하는 데모
<blockquote>
<p>자매작품: <a href="https://codepen.io/cobra_winfrey/pen/ZEYzMBj">Holiday CSSweater Generator</a></p>
</blockquote>
</li>
<li><a href="https://codepen.io/hoanghien0410/pen/MMPaqm">3D carousel</a>: 3차원 캐로셀 구현 데모</li>
<li><a href="https://codepen.io/bsehovac/pen/EMyWVv">The Cube</a>:  <a href="https://threejs.org/">three.js</a>로 구현한 인터랙티브 큐브 게임</li>
</ul>
</content></entry></feed>